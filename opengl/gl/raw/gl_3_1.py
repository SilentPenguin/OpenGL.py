#BEWARE: automatically generated code
#This code was generated by opengl/gl/generate/__main__.py

from opengl.gl.raw.bindings import *

@accepts(t.enum, t.int, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def draw_arrays_instanced(mode, first, count, instancecount):
    '''
    draw multiple instances of a range of elements
    
    Args:
        mode: Specifies what kind of primitives to render
        first: Specifies the starting index in the enabled arrays
        count: Specifies the number of indices to be rendered
    '''

@accepts(t.enum, t.sizei, t.enum, t.void, t.sizei)
@returns(t.void)
@binds(dll)
def draw_elements_instanced(mode, count, type, indices, instancecount):
    '''
    draw multiple instances of a set of elements
    
    Args:
        mode: Specifies what kind of primitives to render
        count: Specifies the number of elements to be rendered
        type: Specifies the type of the values in indices
        indices: Specifies a pointer to the location where the indices are stored
    '''

@accepts(t.enum, t.enum, t.uint)
@returns(t.void)
@binds(dll)
def tex_buffer(target, internalformat, buffer):
    '''
    attach a buffer object's data store to a buffer texture object
    
    Args:
        target: Specifies the target to which the texture is bound for glTexBuffer
        internalformat: Specifies the internal format of the data in the store belonging to buffer
        buffer: Specifies the name of the buffer object whose storage to attach to the active buffer texture
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def primitive_restart_index(index):
    '''
    specify the primitive restart index
    
    Args:
        index: Specifies the value to be interpreted as the primitive restart index
    '''

SAMPLER_2D_RECT = 0x8B63
SAMPLER_2D_RECT_SHADOW = 0x8B64
SAMPLER_BUFFER = 0x8DC2
INT_SAMPLER_2D_RECT = 0x8DCD
INT_SAMPLER_BUFFER = 0x8DD0
UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5
UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8
TEXTURE_BUFFER = 0x8C2A
MAX_TEXTURE_BUFFER_SIZE = 0x8C2B
TEXTURE_BINDING_BUFFER = 0x8C2C
TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D
TEXTURE_RECTANGLE = 0x84F5
TEXTURE_BINDING_RECTANGLE = 0x84F6
PROXY_TEXTURE_RECTANGLE = 0x84F7
MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8
R8_SNORM = 0x8F94
RG8_SNORM = 0x8F95
RGB8_SNORM = 0x8F96
RGBA8_SNORM = 0x8F97
R16_SNORM = 0x8F98
RG16_SNORM = 0x8F99
RGB16_SNORM = 0x8F9A
RGBA16_SNORM = 0x8F9B
SIGNED_NORMALIZED = 0x8F9C
PRIMITIVE_RESTART = 0x8F9D
PRIMITIVE_RESTART_INDEX = 0x8F9E
@accepts(t.enum, t.enum, t.intptr, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def copy_buffer_sub_data(readtarget, writetarget, readoffset, writeoffset, size):
    '''
    copy all or part of the data store of a buffer object to the data store of another buffer object
    
    Args:
        readtarget: Specifies the target to which the source buffer object is bound for glCopyBufferSubData
        writetarget: Specifies the target to which the destination buffer object is bound for glCopyBufferSubData
        readoffset: Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read
        writeoffset: Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written
        size: Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object
    '''

COPY_READ_BUFFER = 0x8F36
COPY_WRITE_BUFFER = 0x8F37
@accepts(t.uint, t.sizei, POINTER(t.char_p), POINTER(t.uint))
@returns(t.void)
@binds(dll)
def get_uniform_indices(program, uniformcount, uniformnames, uniformindices):
    '''
    retrieve the index of a named uniform block
    
    Args:
        program: Specifies the name of a program containing uniforms whose indices to query
        uniformcount: Specifies the number of uniforms whose indices to query
        uniformnames: Specifies the address of an array of pointers to buffers containing the names of the queried uniforms
        uniformindices: Specifies the address of an array that will receive the indices of the uniforms
    '''

@accepts(t.uint, t.sizei, POINTER(t.uint), t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_active_uniformsiv(program, uniformcount, uniformindices, pname, params):
    '''
    Returns information about several active uniform variables for the specified program object
    
    Args:
        program: Specifies the program object to be queried
        uniformcount: Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return
        uniformindices: Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried
        pname: Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params
        params: Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices
    '''

@accepts(t.uint, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_uniform_name(program, uniformindex, bufsize, length, uniformname):
    '''
    query the name of an active uniform
    
    Args:
        program: Specifies the program containing the active uniform index uniformIndex
        uniformindex: Specifies the index of the active uniform whose name to query
        bufsize: Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName
        length: Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName
        uniformname: Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program
    '''

@accepts(t.uint, t.char_p)
@returns(t.uint)
@binds(dll)
def get_uniform_block_index(program, uniformblockname):
    '''
    retrieve the index of a named uniform block
    
    Args:
        program: Specifies the name of a program containing the uniform block
        uniformblockname: Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve
    '''

@accepts(t.uint, t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_active_uniform_blockiv(program, uniformblockindex, pname, params):
    pass

@accepts(t.uint, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_uniform_block_name(program, uniformblockindex, bufsize, length, uniformblockname):
    '''
    retrieve the name of an active uniform block
    
    Args:
        program: Specifies the name of a program containing the uniform block
        uniformblockindex: Specifies the index of the uniform block within program
        bufsize: Specifies the size of the buffer addressed by uniformBlockName
        length: Specifies the address of a variable to receive the number of characters that were written to uniformBlockName
        uniformblockname: Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex
    '''

@accepts(t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def uniform_block_binding(program, uniformblockindex, uniformblockbinding):
    '''
    assign a binding point to an active uniform block
    
    Args:
        program: The name of a program object containing the active uniform block whose binding to assign
        uniformblockindex: The index of the active uniform block within program whose binding to assign
        uniformblockbinding: Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program
    '''

@accepts(t.enum, t.uint, t.uint, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def bind_buffer_range(target, index, buffer, offset, size):
    '''
    bind a range within a buffer object to an indexed buffer target
    
    Args:
        target: Specify the target of the bind operation
        index: Specify the index of the binding point within the array specified by target
        buffer: The name of a buffer object to bind to the specified binding point
        offset: The starting offset in basic machine units into the buffer object buffer
        size: The amount of data in machine units that can be read from the buffer object while used as an indexed target
    '''

@accepts(t.enum, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def bind_buffer_base(target, index, buffer):
    '''
    bind a buffer object to an indexed buffer target
    
    Args:
        target: Specify the target of the bind operation
        index: Specify the index of the binding point within the array specified by target
        buffer: The name of a buffer object to bind to the specified binding point
    '''

@accepts(t.enum, t.uint, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_integeri_v(target, index, data):
    pass

UNIFORM_BUFFER = 0x8A11
UNIFORM_BUFFER_BINDING = 0x8A28
UNIFORM_BUFFER_START = 0x8A29
UNIFORM_BUFFER_SIZE = 0x8A2A
MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B
MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C
MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D
MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E
MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F
MAX_UNIFORM_BLOCK_SIZE = 0x8A30
MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31
MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32
MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33
UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34
ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35
ACTIVE_UNIFORM_BLOCKS = 0x8A36
UNIFORM_TYPE = 0x8A37
UNIFORM_SIZE = 0x8A38
UNIFORM_NAME_LENGTH = 0x8A39
UNIFORM_BLOCK_INDEX = 0x8A3A
UNIFORM_OFFSET = 0x8A3B
UNIFORM_ARRAY_STRIDE = 0x8A3C
UNIFORM_MATRIX_STRIDE = 0x8A3D
UNIFORM_IS_ROW_MAJOR = 0x8A3E
UNIFORM_BLOCK_BINDING = 0x8A3F
UNIFORM_BLOCK_DATA_SIZE = 0x8A40
UNIFORM_BLOCK_NAME_LENGTH = 0x8A41
UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42
UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43
UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44
UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45
UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46
INVALID_INDEX = 0xFFFFFFFF