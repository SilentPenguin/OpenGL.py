#BEWARE: automatically generated code
#This code was generated by /generate/__main__.py

from opengl.gl.raw.bindings import *

@accepts(t.enum, t.int, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def draw_arrays_instanced(mode, first, count, instancecount):
    '''
    draw multiple instances of a range of elements.
    
    gl.draw_arrays_instanced behaves identically to gl.draw_arrays except that
    primcount instances of the range of elements are executed and the value of
    the internal counter instanceID advances for each iteration. instanceID is
    an internal 32-bit integer counter that may be read by a vertex shader as
    gl_InstanceID.
    
    Args:
        mode: what kind of primitives to render.
        first: the starting index in the enabled arrays.
        count: the number of indices to be rendered.
        instancecount: the number of instances of the specified range of indices
            to be rendered.
    '''

@accepts(t.enum, t.sizei, t.enum, t.void, t.sizei)
@returns(t.void)
@binds(dll)
def draw_elements_instanced(mode, count, type, indices, instancecount):
    '''
    draw multiple instances of a set of elements.
    
    gl.draw_elements_instanced behaves identically to gl.draw_elements except
    that primcount instances of the set of elements are executed and the value
    of the internal counter instanceID advances for each iteration. instanceID
    is an internal 32-bit integer counter that may be read by a vertex shader as
    gl_InstanceID.
    
    Args:
        mode: what kind of primitives to render.
        count: the number of elements to be rendered.
        type: the type of the values in indices.
        indices: a pointer to the location where the indices are stored.
        instancecount: the number of instances of the specified range of indices
            to be rendered.
    '''

@accepts(t.enum, t.enum, t.uint)
@returns(t.void)
@binds(dll)
def tex_buffer(target, internalformat, buffer):
    '''
    attach a buffer object's data store to a buffer texture object.
    
    gl.tex_buffer and gl.texture_buffer attaches the data store of a specified
    buffer object to a specified texture object, and specify the storage format
    for the texture image found found in the buffer object. The texture object
    must be a buffer texture.
    
    Args:
        target: the target to which the texture is bound for gltexbuffer.
        internalformat: the internal format of the data in the store belonging
            to buffer.
        buffer: the name of the buffer object whose storage to attach to the
            active buffer texture.
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def primitive_restart_index(index):
    '''
    specify the primitive restart index.
    
    gl.primitive_restart_index specifies a vertex array element that is treated
    specially when primitive restarting is enabled. This is known as the
    primitive restart index.
    
    Args:
        index: the value to be interpreted as the primitive restart index.
    '''

SAMPLER_2D_RECT = 0x8B63
SAMPLER_2D_RECT_SHADOW = 0x8B64
SAMPLER_BUFFER = 0x8DC2
INT_SAMPLER_2D_RECT = 0x8DCD
INT_SAMPLER_BUFFER = 0x8DD0
UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5
UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8
TEXTURE_BUFFER = 0x8C2A
MAX_TEXTURE_BUFFER_SIZE = 0x8C2B
TEXTURE_BINDING_BUFFER = 0x8C2C
TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D
TEXTURE_RECTANGLE = 0x84F5
TEXTURE_BINDING_RECTANGLE = 0x84F6
PROXY_TEXTURE_RECTANGLE = 0x84F7
MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8
R8_SNORM = 0x8F94
RG8_SNORM = 0x8F95
RGB8_SNORM = 0x8F96
RGBA8_SNORM = 0x8F97
R16_SNORM = 0x8F98
RG16_SNORM = 0x8F99
RGB16_SNORM = 0x8F9A
RGBA16_SNORM = 0x8F9B
SIGNED_NORMALIZED = 0x8F9C
PRIMITIVE_RESTART = 0x8F9D
PRIMITIVE_RESTART_INDEX = 0x8F9E
@accepts(t.enum, t.enum, t.intptr, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def copy_buffer_sub_data(readtarget, writetarget, readoffset, writeoffset, size):
    '''
    copy all or part of the data store of a buffer object to the data store of
another buffer object.
    
    gl.copy_buffer_sub_data and gl.copy_named_buffer_sub_data copy part of the
    data store attached to a source buffer object to the data store attached to
    a destination buffer object. The number of basic machine units indicated by
    size is copied from the source at offset readOffset to the destination at
    writeOffset. readOffset, writeOffset and size are in terms of basic machine
    units.
    
    Args:
        readtarget: the target to which the source buffer object is bound for
            glcopybuffersubdata.
        writetarget: the target to which the destination buffer object is bound
            for glcopybuffersubdata.
        readoffset: the offset, in basic machine units, within the data store of
            the source buffer object at which data will be read.
        writeoffset: the offset, in basic machine units, within the data store
            of the destination buffer object at which data will be written.
        size: the size, in basic machine units, of the data to be copied from
            the source buffer object to the destination buffer object.
    '''

COPY_READ_BUFFER = 0x8F36
COPY_WRITE_BUFFER = 0x8F37
@accepts(t.uint, t.sizei, POINTER(t.char_p), POINTER(t.uint))
@returns(t.void)
@binds(dll)
def get_uniform_indices(program, uniformcount, uniformnames, uniformindices):
    '''
    retrieve the index of a named uniform block.
    
    gl.get_uniform_indices retrieves the indices of a number of uniforms within
    program.
    
    Args:
        program: the name of a program containing uniforms whose indices to
            query.
        uniformcount: the number of uniforms whose indices to query.
        uniformnames: the address of an array of pointers to buffers containing
            the names of the queried uniforms.
        uniformindices: the address of an array that will receive the indices of
            the uniforms.
    '''

@accepts(t.uint, t.sizei, POINTER(t.uint), t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_active_uniformsiv(program, uniformcount, uniformindices, pname, params):
    '''
    Returns information about several active uniform variables for the specified
program object.
    
    gl.get_active_uniformsiv queries the value of the parameter named pname for
    each of the uniforms within program whose indices are specified in the array
    of uniformCount unsigned integers uniformIndices. Upon success, the value of
    the parameter for each uniform is written into the corresponding entry in
    the array whose address is given in params. If an error is generated,
    nothing is written into params.
    
    Args:
        program: the program object to be queried.
        uniformcount: both the number of elements in the array of indices
            uniformindices and the number of parameters written to params upon
            successful return.
        uniformindices: the address of an array of uniformcount integers
            containing the indices of uniforms within program whose parameter
            pname should be queried.
        pname: the property of each uniform in uniformindices that should be
            written into the corresponding element of params.
        params: the address of an array of uniformcount integers which are to
            receive the value of pname for each uniform in uniformindices.
    '''

@accepts(t.uint, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_uniform_name(program, uniformindex, bufsize, length, uniformname):
    '''
    query the name of an active uniform.
    
    gl.get_active_uniform_name returns the name of the active uniform at
    uniformIndex within program. If uniformName is not None, up to bufSize
    characters will be written into the array whose address is specified by
    uniformName. If length is not None, the number of characters that were
    written into uniformName will be placed in the variable whose address is
    specified in length. If length is None, no length is returned.
    
    Args:
        program: the program containing the active uniform index uniformindex.
        uniformindex: the index of the active uniform whose name to query.
        bufsize: the size of the buffer, in units of glchar, of the buffer whose
            address is specified in uniformname.
        length: the address of a variable that will receive the number of
            characters that were or would have been written to the buffer
            addressed by uniformname.
        uniformname: the address of a buffer into which the gl will place the
            name of the active uniform at uniformindex within program.
    '''

@accepts(t.uint, t.char_p)
@returns(t.uint)
@binds(dll)
def get_uniform_block_index(program, uniformblockname):
    '''
    retrieve the index of a named uniform block.
    
    gl.get_uniform_block_index retrieves the index of a uniform block within
    program.
    
    Args:
        program: the name of a program containing the uniform block.
        uniformblockname: the address an array of characters to containing the
            name of the uniform block whose index to retrieve.
    '''

@accepts(t.uint, t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_active_uniform_blockiv(program, uniformblockindex, pname, params):
    pass

@accepts(t.uint, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_uniform_block_name(program, uniformblockindex, bufsize, length, uniformblockname):
    '''
    retrieve the name of an active uniform block.
    
    gl.get_active_uniform_block_name retrieves the name of the active uniform
    block at uniformBlockIndex within program.
    
    Args:
        program: the name of a program containing the uniform block.
        uniformblockindex: the index of the uniform block within program.
        bufsize: the size of the buffer addressed by uniformblockname.
        length: the address of a variable to receive the number of characters
            that were written to uniformblockname.
        uniformblockname: the address an array of characters to receive the name
            of the uniform block at uniformblockindex.
    '''

@accepts(t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def uniform_block_binding(program, uniformblockindex, uniformblockbinding):
    '''
    assign a binding point to an active uniform block.
    
    Args:
        program: the name of a program object containing the active uniform
            block whose binding to assign.
        uniformblockindex: the index of the active uniform block within program
            whose binding to assign.
        uniformblockbinding: the binding point to which to bind the uniform
            block with index uniformblockindex within program.
    '''

@accepts(t.enum, t.uint, t.uint, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def bind_buffer_range(target, index, buffer, offset, size):
    '''
    bind a range within a buffer object to an indexed buffer target.
    
    gl.bind_buffer_range binds a range the buffer object buffer represented by
    offset and size to the binding point at index index of the array of targets
    specified by target. Each target represents an indexed array of buffer
    binding points, as well as a single general binding point that can be used
    by other buffer manipulation functions such as gl.bind_buffer or
    gl.map_buffer. In addition to binding a range of buffer to the indexed
    buffer binding target, gl.bind_buffer_range also binds the range to the
    generic buffer binding point specified by target.
    
    Args:
        target: the target of the bind operation.
        index: the index of the binding point within the array specified by
            target.
        buffer: the name of a buffer object to bind to the specified binding
            point.
        offset: the starting offset in basic machine units into the buffer
            object buffer.
        size: the amount of data in machine units that can be read from the
            buffer object while used as an indexed target.
    '''

@accepts(t.enum, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def bind_buffer_base(target, index, buffer):
    '''
    bind a buffer object to an indexed buffer target.
    
    gl.bind_buffer_base binds the buffer object buffer to the binding point at
    index index of the array of targets specified by target. Each target
    represents an indexed array of buffer binding points, as well as a single
    general binding point that can be used by other buffer manipulation
    functions such as gl.bind_buffer or gl.map_buffer. In addition to binding
    buffer to the indexed buffer binding target, gl.bind_buffer_base also binds
    buffer to the generic buffer binding point specified by target.
    
    Args:
        target: the target of the bind operation.
        index: the index of the binding point within the array specified by
            target.
        buffer: the name of a buffer object to bind to the specified binding
            point.
    '''

@accepts(t.enum, t.uint, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_integeri_v(target, index, data):
    pass

UNIFORM_BUFFER = 0x8A11
UNIFORM_BUFFER_BINDING = 0x8A28
UNIFORM_BUFFER_START = 0x8A29
UNIFORM_BUFFER_SIZE = 0x8A2A
MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B
MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C
MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D
MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E
MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F
MAX_UNIFORM_BLOCK_SIZE = 0x8A30
MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31
MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32
MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33
UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34
ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35
ACTIVE_UNIFORM_BLOCKS = 0x8A36
UNIFORM_TYPE = 0x8A37
UNIFORM_SIZE = 0x8A38
UNIFORM_NAME_LENGTH = 0x8A39
UNIFORM_BLOCK_INDEX = 0x8A3A
UNIFORM_OFFSET = 0x8A3B
UNIFORM_ARRAY_STRIDE = 0x8A3C
UNIFORM_MATRIX_STRIDE = 0x8A3D
UNIFORM_IS_ROW_MAJOR = 0x8A3E
UNIFORM_BLOCK_BINDING = 0x8A3F
UNIFORM_BLOCK_DATA_SIZE = 0x8A40
UNIFORM_BLOCK_NAME_LENGTH = 0x8A41
UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42
UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43
UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44
UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45
UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46
INVALID_INDEX = 0xFFFFFFFF