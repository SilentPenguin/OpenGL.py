#BEWARE: automatically generated code
#This code was generated by opengl/gl/generate/__main__.py

from opengl.gl.raw.bindings import *

@accepts(t.float)
@returns(t.void)
@binds(dll)
def min_sample_shading(value): pass

@accepts(t.uint, t.enum)
@returns(t.void)
@binds(dll)
def blend_equationi(buf, mode): pass

@accepts(t.uint, t.enum, t.enum)
@returns(t.void)
@binds(dll)
def blend_equation_separatei(buf, modeRGB, modeAlpha): pass

@accepts(t.uint, t.enum, t.enum)
@returns(t.void)
@binds(dll)
def blend_funci(buf, src, dst): pass

@accepts(t.uint, t.enum, t.enum, t.enum, t.enum)
@returns(t.void)
@binds(dll)
def blend_func_separatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha): pass

SAMPLE_SHADING = 0x8C36
MIN_SAMPLE_SHADING_VALUE = 0x8C37
MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E
MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F
TEXTURE_CUBE_MAP_ARRAY = 0x9009
TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A
PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B
SAMPLER_CUBE_MAP_ARRAY = 0x900C
SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D
INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E
UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F
@accepts(t.enum, t.void)
@returns(t.void)
@binds(dll)
def draw_arrays_indirect(mode, indirect): pass

@accepts(t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def draw_elements_indirect(mode, type, indirect): pass

DRAW_INDIRECT_BUFFER = 0x8F3F
DRAW_INDIRECT_BUFFER_BINDING = 0x8F43
GEOMETRY_SHADER_INVOCATIONS = 0x887F
MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A
MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B
MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C
FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D
MAX_VERTEX_STREAMS = 0x8E71
@accepts(t.int, t.double)
@returns(t.void)
@binds(dll)
def uniform1d(location, x): pass

@accepts(t.int, t.double, t.double)
@returns(t.void)
@binds(dll)
def uniform2d(location, x, y): pass

@accepts(t.int, t.double, t.double, t.double)
@returns(t.void)
@binds(dll)
def uniform3d(location, x, y, z): pass

@accepts(t.int, t.double, t.double, t.double, t.double)
@returns(t.void)
@binds(dll)
def uniform4d(location, x, y, z, w): pass

@accepts(t.int, t.sizei, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform1dv(location, count, value): pass

@accepts(t.int, t.sizei, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform2dv(location, count, value): pass

@accepts(t.int, t.sizei, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform3dv(location, count, value): pass

@accepts(t.int, t.sizei, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform4dv(location, count, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix2dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix3dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix4dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix2x3dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix2x4dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix3x2dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix3x4dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix4x2dv(location, count, transpose, value): pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.double))
@returns(t.void)
@binds(dll)
def uniform_matrix4x3dv(location, count, transpose, value): pass

@accepts(t.uint, t.int, POINTER(t.double))
@returns(t.void)
@binds(dll)
def get_uniformdv(program, location, params): pass

DOUBLE_VEC2 = 0x8FFC
DOUBLE_VEC3 = 0x8FFD
DOUBLE_VEC4 = 0x8FFE
DOUBLE_MAT2 = 0x8F46
DOUBLE_MAT3 = 0x8F47
DOUBLE_MAT4 = 0x8F48
DOUBLE_MAT2x3 = 0x8F49
DOUBLE_MAT2x4 = 0x8F4A
DOUBLE_MAT3x2 = 0x8F4B
DOUBLE_MAT3x4 = 0x8F4C
DOUBLE_MAT4x2 = 0x8F4D
DOUBLE_MAT4x3 = 0x8F4E
@accepts(t.uint, t.enum, t.char_p)
@returns(t.int)
@binds(dll)
def get_subroutine_uniform_location(program, shadertype, name): pass

@accepts(t.uint, t.enum, t.char_p)
@returns(t.uint)
@binds(dll)
def get_subroutine_index(program, shadertype, name): pass

@accepts(t.uint, t.enum, t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_active_subroutine_uniformiv(program, shadertype, index, pname, values): pass

@accepts(t.uint, t.enum, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_subroutine_uniform_name(program, shadertype, index, bufsize, length, name): pass

@accepts(t.uint, t.enum, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_subroutine_name(program, shadertype, index, bufsize, length, name): pass

@accepts(t.enum, t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def uniform_subroutinesuiv(shadertype, count, indices): pass

@accepts(t.enum, t.int, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def get_uniform_subroutineuiv(shadertype, location, params): pass

@accepts(t.uint, t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_program_stageiv(program, shadertype, pname, values): pass

ACTIVE_SUBROUTINES = 0x8DE5
ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6
ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47
ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48
ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49
MAX_SUBROUTINES = 0x8DE7
MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8
NUM_COMPATIBLE_SUBROUTINES = 0x8E4A
COMPATIBLE_SUBROUTINES = 0x8E4B
@accepts(t.enum, t.int)
@returns(t.void)
@binds(dll)
def patch_parameteri(pname, value): pass

@accepts(t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def patch_parameterfv(pname, values): pass

PATCHES = 0x000E
PATCH_VERTICES = 0x8E72
PATCH_DEFAULT_INNER_LEVEL = 0x8E73
PATCH_DEFAULT_OUTER_LEVEL = 0x8E74
TESS_CONTROL_OUTPUT_VERTICES = 0x8E75
TESS_GEN_MODE = 0x8E76
TESS_GEN_SPACING = 0x8E77
TESS_GEN_VERTEX_ORDER = 0x8E78
TESS_GEN_POINT_MODE = 0x8E79
ISOLINES = 0x8E7A
QUADS = 0x0007
FRACTIONAL_ODD = 0x8E7B
FRACTIONAL_EVEN = 0x8E7C
MAX_PATCH_VERTICES = 0x8E7D
MAX_TESS_GEN_LEVEL = 0x8E7E
MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F
MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80
MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81
MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82
MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83
MAX_TESS_PATCH_COMPONENTS = 0x8E84
MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85
MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86
MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89
MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A
MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C
MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D
MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E
MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F
UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0
UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1
TESS_EVALUATION_SHADER = 0x8E87
TESS_CONTROL_SHADER = 0x8E88
@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def bind_transform_feedback(target, id): pass

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_transform_feedbacks(n, ids): pass

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_transform_feedbacks(n, ids): pass

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_transform_feedback(id): pass

@accepts()
@returns(t.void)
@binds(dll)
def pause_transform_feedback(): pass

@accepts()
@returns(t.void)
@binds(dll)
def resume_transform_feedback(): pass

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def draw_transform_feedback(mode, id): pass

TRANSFORM_FEEDBACK = 0x8E22
TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23
TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24
TRANSFORM_FEEDBACK_BINDING = 0x8E25
@accepts(t.enum, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def draw_transform_feedback_stream(mode, id, stream): pass

@accepts(t.enum, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def begin_query_indexed(target, index, id): pass

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def end_query_indexed(target, index): pass

@accepts(t.enum, t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_query_indexediv(target, index, pname, params): pass

MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70
MAX_VERTEX_STREAMS = 0x8E71