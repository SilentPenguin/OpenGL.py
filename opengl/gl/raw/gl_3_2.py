#BEWARE: automatically generated code
#This code was generated by opengl/gl/generate/__main__.py

from opengl.gl.raw.bindings import *

CONTEXT_CORE_PROFILE_BIT = 0x00000001
CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002
LINES_ADJACENCY = 0x000A
LINE_STRIP_ADJACENCY = 0x000B
TRIANGLES_ADJACENCY = 0x000C
TRIANGLE_STRIP_ADJACENCY = 0x000D
PROGRAM_POINT_SIZE = 0x8642
MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29
FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7
FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8
GEOMETRY_SHADER = 0x8DD9
GEOMETRY_VERTICES_OUT = 0x8916
GEOMETRY_INPUT_TYPE = 0x8917
GEOMETRY_OUTPUT_TYPE = 0x8918
MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF
MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0
MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1
MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122
MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123
MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124
MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125
CONTEXT_PROFILE_MASK = 0x9126
DEPTH_CLAMP = 0x864F
@accepts(t.enum, t.sizei, t.enum, t.void, t.int)
@returns(t.void)
@binds(dll)
def draw_elements_base_vertex(mode, count, type, indices, basevertex): pass

@accepts(t.enum, t.uint, t.uint, t.sizei, t.enum, t.void, t.int)
@returns(t.void)
@binds(dll)
def draw_range_elements_base_vertex(mode, start, end, count, type, indices, basevertex): pass

@accepts(t.enum, t.sizei, t.enum, t.void, t.sizei, t.int)
@returns(t.void)
@binds(dll)
def draw_elements_instanced_base_vertex(mode, count, type, indices, instancecount, basevertex): pass

@accepts(t.enum, POINTER(t.sizei), t.enum, t.void, t.sizei, POINTER(t.int))
@returns(t.void)
@binds(dll)
def multi_draw_elements_base_vertex(mode, count, type, indices, drawcount, basevertex): pass

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def provoking_vertex(mode): pass

QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C
FIRST_VERTEX_CONVENTION = 0x8E4D
LAST_VERTEX_CONVENTION = 0x8E4E
PROVOKING_VERTEX = 0x8E4F
TEXTURE_CUBE_MAP_SEAMLESS = 0x884F
@accepts(t.enum, t.bitfield)
@returns(t.sync)
@binds(dll)
def fence_sync(condition, flags): pass

@accepts(t.sync)
@returns(t.boolean)
@binds(dll)
def is_sync(sync): pass

@accepts(t.sync)
@returns(t.void)
@binds(dll)
def delete_sync(sync): pass

@accepts(t.sync, t.bitfield, t.uint64)
@returns(t.enum)
@binds(dll)
def client_wait_sync(sync, flags, timeout): pass

@accepts(t.sync, t.bitfield, t.uint64)
@returns(t.void)
@binds(dll)
def wait_sync(sync, flags, timeout): pass

@accepts(t.enum, POINTER(t.int64))
@returns(t.void)
@binds(dll)
def get_integer64v(pname, data): pass

@accepts(t.sync, t.enum, t.sizei, POINTER(t.sizei), POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_synciv(sync, pname, bufSize, length, values): pass

MAX_SERVER_WAIT_TIMEOUT = 0x9111
OBJECT_TYPE = 0x9112
SYNC_CONDITION = 0x9113
SYNC_STATUS = 0x9114
SYNC_FLAGS = 0x9115
SYNC_FENCE = 0x9116
SYNC_GPU_COMMANDS_COMPLETE = 0x9117
UNSIGNALED = 0x9118
SIGNALED = 0x9119
ALREADY_SIGNALED = 0x911A
TIMEOUT_EXPIRED = 0x911B
CONDITION_SATISFIED = 0x911C
WAIT_FAILED = 0x911D
TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF
SYNC_FLUSH_COMMANDS_BIT = 0x00000001
@accepts(t.enum, t.uint, POINTER(t.int64))
@returns(t.void)
@binds(dll)
def get_integer64i_v(target, index, data): pass

@accepts(t.enum, t.enum, POINTER(t.int64))
@returns(t.void)
@binds(dll)
def get_buffer_parameteri64v(target, pname, params): pass

@accepts(t.enum, t.enum, t.uint, t.int)
@returns(t.void)
@binds(dll)
def framebuffer_texture(target, attachment, texture, level): pass

@accepts(t.enum, t.sizei, t.enum, t.sizei, t.sizei, t.boolean)
@returns(t.void)
@binds(dll)
def tex_image2_d_multisample(target, samples, internalformat, width, height, fixedsamplelocations): pass

@accepts(t.enum, t.sizei, t.enum, t.sizei, t.sizei, t.sizei, t.boolean)
@returns(t.void)
@binds(dll)
def tex_image3_d_multisample(target, samples, internalformat, width, height, depth, fixedsamplelocations): pass

@accepts(t.enum, t.uint, POINTER(t.float))
@returns(t.void)
@binds(dll)
def get_multisamplefv(pname, index, val): pass

@accepts(t.uint, t.bitfield)
@returns(t.void)
@binds(dll)
def sample_maski(maskNumber, mask): pass

SAMPLE_POSITION = 0x8E50
SAMPLE_MASK = 0x8E51
SAMPLE_MASK_VALUE = 0x8E52
MAX_SAMPLE_MASK_WORDS = 0x8E59
TEXTURE_2D_MULTISAMPLE = 0x9100
PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101
TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102
PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103
TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104
TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105
TEXTURE_SAMPLES = 0x9106
TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107
SAMPLER_2D_MULTISAMPLE = 0x9108
INT_SAMPLER_2D_MULTISAMPLE = 0x9109
UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A
SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B
INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C
UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D
MAX_COLOR_TEXTURE_SAMPLES = 0x910E
MAX_DEPTH_TEXTURE_SAMPLES = 0x910F
MAX_INTEGER_SAMPLES = 0x9110