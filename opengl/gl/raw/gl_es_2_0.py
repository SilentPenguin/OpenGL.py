#BEWARE: automatically generated code
#This code was generated by /generate/__main__.py

from opengl.gl.raw.bindings import *

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def active_texture(texture):
    '''
    select active texture unit
    
    Args:
        texture: Specifies which texture unit to make active
    '''

@accepts(t.uint, t.uint)
@returns(t.void)
@binds(dll)
def attach_shader(program, shader):
    '''
    Attaches a shader object to a program object
    
    Args:
        program: Specifies the program object to which a shader object will be attached
        shader: Specifies the shader object that is to be attached
    '''

@accepts(t.uint, t.uint, t.char_p)
@returns(t.void)
@binds(dll)
def bind_attrib_location(program, index, name):
    '''
    Associates a generic vertex attribute index with a named attribute variable
    
    Args:
        program: Specifies the handle of the program object in which the association is to be made
        index: Specifies the index of the generic vertex attribute to be bound
        name: Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound
    '''

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def bind_buffer(target, buffer):
    '''
    bind a named buffer object
    
    Args:
        target: Specifies the target to which the buffer object is bound, which must be one of the buffer binding targets in the following table:
        buffer: Specifies the name of a buffer object
    '''

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def bind_framebuffer(target, framebuffer):
    '''
    bind a framebuffer to a framebuffer target
    
    Args:
        target: Specifies the framebuffer target of the binding operation
        framebuffer: Specifies the name of the framebuffer object to bind
    '''

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def bind_renderbuffer(target, renderbuffer):
    '''
    bind a renderbuffer to a renderbuffer target
    
    Args:
        target: Specifies the renderbuffer target of the binding operation
        renderbuffer: Specifies the name of the renderbuffer object to bind
    '''

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def bind_texture(target, texture):
    '''
    bind a named texture to a texturing target
    
    Args:
        target: Specifies the target to which the texture is bound
        texture: Specifies the name of a texture
    '''

@accepts(t.float, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def blend_color(red, green, blue, alpha):
    '''
    set the blend color
    
    Args:
        red, green, blue, alpha: specify the components of gl.BLEND_COLOR
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def blend_equation(mode):
    '''
    specify the equation used for both the RGB blend equation and the Alpha blend equation
    
    Args:
        mode: specifies how source and destination colors are combined
    '''

@accepts(t.enum, t.enum)
@returns(t.void)
@binds(dll)
def blend_equation_separate(modergb, modealpha):
    '''
    set the RGB blend equation and the alpha blend equation separately
    
    Args:
        modergb: specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined
        modealpha: specifies the alpha blend equation, how the alpha component of the source and destination colors are combined
    '''

@accepts(t.enum, t.enum)
@returns(t.void)
@binds(dll)
def blend_func(sfactor, dfactor):
    '''
    specify pixel arithmetic
    
    Args:
        sfactor: Specifies how the red, green, blue, and alpha source blending factors are computed
        dfactor: Specifies how the red, green, blue, and alpha destination blending factors are computed
    '''

@accepts(t.enum, t.enum, t.enum, t.enum)
@returns(t.void)
@binds(dll)
def blend_func_separate(sfactorrgb, dfactorrgb, sfactoralpha, dfactoralpha):
    '''
    specify pixel arithmetic for RGB and alpha components separately
    
    Args:
    '''

@accepts(t.enum, t.sizeiptr, t.void, t.enum)
@returns(t.void)
@binds(dll)
def buffer_data(target, size, data, usage):
    '''
    creates and initializes a buffer object's data store
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.buffer_data, which must be one of the buffer binding targets in the following table:
        size: Specifies the size in bytes of the buffer object's new data store
        data: Specifies a pointer to data that will be copied into the data store for initialization, or None if no data is to be copied
        usage: Specifies the expected usage pattern of the data store
    '''

@accepts(t.enum, t.intptr, t.sizeiptr, t.void)
@returns(t.void)
@binds(dll)
def buffer_sub_data(target, offset, size, data):
    '''
    updates a subset of a buffer object's data store
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.buffer_sub_data, which must be one of the buffer binding targets in the following table:
        offset: Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes
        size: Specifies the size in bytes of the data store region being replaced
        data: Specifies a pointer to the new data that will be copied into the data store
    '''

@accepts(t.enum)
@returns(t.enum)
@binds(dll)
def check_framebuffer_status(target):
    '''
    check the completeness status of a framebuffer
    
    Args:
        target: Specify the target to which the framebuffer is bound for gl.check_framebuffer_status, and the target against which framebuffer completeness of framebuffer is checked for gl.check_named_framebuffer_status
    '''

@accepts(t.bitfield)
@returns(t.void)
@binds(dll)
def clear(mask):
    '''
    clear buffers to preset values
    
    Args:
        mask: Bitwise OR of masks that indicate the buffers to be cleared
    '''

@accepts(t.float, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def clear_color(red, green, blue, alpha):
    '''
    specify clear values for the color buffers
    
    Args:
        red, green, blue, alpha: Specify the red, green, blue, and alpha values used when the color buffers are cleared
    '''

@accepts(t.float)
@returns(t.void)
@binds(dll)
def clear_depthf(d):
    pass

@accepts(t.int)
@returns(t.void)
@binds(dll)
def clear_stencil(s):
    '''
    specify the clear value for the stencil buffer
    
    Args:
        s: Specifies the index used when the stencil buffer is cleared
    '''

@accepts(t.boolean, t.boolean, t.boolean, t.boolean)
@returns(t.void)
@binds(dll)
def color_mask(red, green, blue, alpha):
    '''
    enable and disable writing of frame buffer color components
    
    Args:
        red, green, blue, alpha: Specify whether red, green, blue, and alpha are to be written into the frame buffer
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def compile_shader(shader):
    '''
    Compiles a shader object
    
    Args:
        shader: Specifies the shader object to be compiled
    '''

@accepts(t.enum, t.int, t.enum, t.sizei, t.sizei, t.int, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_image2_d(target, level, internalformat, width, height, border, imagesize, data):
    '''
    specify a two-dimensional texture image in a compressed format
    
    Args:
        target: Specifies the target texture
        level: Specifies the level-of-detail number
        internalformat: Specifies the format of the compressed image data stored at address data
        width: Specifies the width of the texture image
        height: Specifies the height of the texture image
        border: This value must be 0
        imagesize: Specifies the number of unsigned bytes of image data starting at the address specified by data
        data: Specifies a pointer to the compressed image data in memory
    '''

@accepts(t.enum, t.int, t.int, t.int, t.sizei, t.sizei, t.enum, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_sub_image2_d(target, level, xoffset, yoffset, width, height, format, imagesize, data):
    '''
    specify a two-dimensional texture subimage in a compressed format
    
    Args:
        target: Specifies the target to which the texture is bound for gl.compressed_tex_sub_image2D function
        level: Specifies the level-of-detail number
        xoffset: Specifies a texel offset in the x direction within the texture array
        yoffset: Specifies a texel offset in the y direction within the texture array
        width: Specifies the width of the texture subimage
        height: Specifies the height of the texture subimage
        format: Specifies the format of the compressed image data stored at address data
        imagesize: Specifies the number of unsigned bytes of image data starting at the address specified by data
        data: Specifies a pointer to the compressed image data in memory
    '''

@accepts(t.enum, t.int, t.enum, t.int, t.int, t.sizei, t.sizei, t.int)
@returns(t.void)
@binds(dll)
def copy_tex_image2_d(target, level, internalformat, x, y, width, height, border):
    '''
    copy pixels into a 2D texture image
    
    Args:
        target: Specifies the target texture
        level: Specifies the level-of-detail number
        internalformat: Specifies the internal format of the texture
        x, y: Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied
        width: Specifies the width of the texture image
        height: Specifies the height of the texture image
        border: Must be 0
    '''

@accepts(t.enum, t.int, t.int, t.int, t.int, t.int, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def copy_tex_sub_image2_d(target, level, xoffset, yoffset, x, y, width, height):
    '''
    copy a two-dimensional texture subimage
    
    Args:
        target: Specifies the target to which the texture object is bound for gl.copy_tex_sub_image2D function
        level: Specifies the level-of-detail number
        xoffset: Specifies a texel offset in the x direction within the texture array
        yoffset: Specifies a texel offset in the y direction within the texture array
        x, y: Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied
        width: Specifies the width of the texture subimage
        height: Specifies the height of the texture subimage
    '''

@accepts()
@returns(t.uint)
@binds(dll)
def create_program():
    '''
    Creates a program object
    
    Args:
    '''

@accepts(t.enum)
@returns(t.uint)
@binds(dll)
def create_shader(type):
    '''
    Creates a shader object
    
    Args:
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def cull_face(mode):
    '''
    specify whether front- or back-facing facets can be culled
    
    Args:
        mode: Specifies whether front- or back-facing facets are candidates for culling
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_buffers(n, buffers):
    '''
    delete named buffer objects
    
    Args:
        n: Specifies the number of buffer objects to be deleted
        buffers: Specifies an array of buffer objects to be deleted
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_framebuffers(n, framebuffers):
    '''
    delete framebuffer objects
    
    Args:
        n: Specifies the number of framebuffer objects to be deleted
        framebuffers: A pointer to an array containing n framebuffer objects to be deleted
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def delete_program(program):
    '''
    Deletes a program object
    
    Args:
        program: Specifies the program object to be deleted
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_renderbuffers(n, renderbuffers):
    '''
    delete renderbuffer objects
    
    Args:
        n: Specifies the number of renderbuffer objects to be deleted
        renderbuffers: A pointer to an array containing n renderbuffer objects to be deleted
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def delete_shader(shader):
    '''
    Deletes a shader object
    
    Args:
        shader: Specifies the shader object to be deleted
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_textures(n, textures):
    '''
    delete named textures
    
    Args:
        n: Specifies the number of textures to be deleted
        textures: Specifies an array of textures to be deleted
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def depth_func(func):
    '''
    specify the value used for depth buffer comparisons
    
    Args:
        func: Specifies the depth comparison function
    '''

@accepts(t.boolean)
@returns(t.void)
@binds(dll)
def depth_mask(flag):
    '''
    enable or disable writing into the depth buffer
    
    Args:
        flag: Specifies whether the depth buffer is enabled for writing
    '''

@accepts(t.float, t.float)
@returns(t.void)
@binds(dll)
def depth_rangef(n, f):
    pass

@accepts(t.uint, t.uint)
@returns(t.void)
@binds(dll)
def detach_shader(program, shader):
    '''
    Detaches a shader object from a program object to which it is attached
    
    Args:
        program: Specifies the program object from which to detach the shader object
        shader: Specifies the shader object to be detached
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def disable(cap):
    pass

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def disable_vertex_attrib_array(index):
    pass

@accepts(t.enum, t.int, t.sizei)
@returns(t.void)
@binds(dll)
def draw_arrays(mode, first, count):
    '''
    render primitives from array data
    
    Args:
        mode: Specifies what kind of primitives to render
        first: Specifies the starting index in the enabled arrays
        count: Specifies the number of indices to be rendered
    '''

@accepts(t.enum, t.sizei, t.enum, t.void)
@returns(t.void)
@binds(dll)
def draw_elements(mode, count, type, indices):
    '''
    render primitives from array data
    
    Args:
        mode: Specifies what kind of primitives to render
        count: Specifies the number of elements to be rendered
        type: Specifies the type of the values in indices
        indices: Specifies a pointer to the location where the indices are stored
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def enable(cap):
    '''
    enable or disable server-side GL capabilities
    
    Args:
        cap: Specifies a symbolic constant indicating a GL capability
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def enable_vertex_attrib_array(index):
    '''
    Enable or disable a generic vertex attribute array
    
    Args:
        index: Specifies the index of the generic vertex attribute to be enabled or disabled
    '''

@accepts()
@returns(t.void)
@binds(dll)
def finish():
    '''
    block until all GL execution is complete
    
    Args:
    '''

@accepts()
@returns(t.void)
@binds(dll)
def flush():
    '''
    force execution of GL commands in finite time
    
    Args:
    '''

@accepts(t.enum, t.enum, t.enum, t.uint)
@returns(t.void)
@binds(dll)
def framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer):
    '''
    attach a renderbuffer as a logical buffer of a framebuffer object
    
    Args:
        target: Specifies the target to which the framebuffer is bound for gl.framebuffer_renderbuffer
        attachment: Specifies the attachment point of the framebuffer
        renderbuffertarget: Specifies the renderbuffer target
        renderbuffer: Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach
    '''

@accepts(t.enum, t.enum, t.enum, t.uint, t.int)
@returns(t.void)
@binds(dll)
def framebuffer_texture2_d(target, attachment, textarget, texture, level):
    pass

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def front_face(mode):
    '''
    define front- and back-facing polygons
    
    Args:
        mode: Specifies the orientation of front-facing polygons
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_buffers(n, buffers):
    '''
    generate buffer object names
    
    Args:
        n: Specifies the number of buffer object names to be generated
        buffers: Specifies an array in which the generated buffer object names are stored
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def generate_mipmap(target):
    '''
    generate mipmaps for a specified texture object
    
    Args:
        target: Specifies the target to which the texture object is bound for gl.generate_mipmap
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_framebuffers(n, framebuffers):
    '''
    generate framebuffer object names
    
    Args:
        n: Specifies the number of framebuffer object names to generate
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_renderbuffers(n, renderbuffers):
    '''
    generate renderbuffer object names
    
    Args:
        n: Specifies the number of renderbuffer object names to generate
        renderbuffers: Specifies an array in which the generated renderbuffer object names are stored
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_textures(n, textures):
    '''
    generate texture names
    
    Args:
        n: Specifies the number of texture names to be generated
        textures: Specifies an array in which the generated texture names are stored
    '''

@accepts(t.uint, t.uint, t.sizei, POINTER(t.sizei), POINTER(t.int), POINTER(t.enum), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_attrib(program, index, bufsize, length, size, type, name):
    '''
    Returns information about an active attribute variable for the specified program object
    
    Args:
        program: Specifies the program object to be queried
        index: Specifies the index of the attribute variable to be queried
        bufsize: Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name
        length: Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than None is passed
        size: Returns the size of the attribute variable
        type: Returns the data type of the attribute variable
        name: Returns a null terminated string containing the name of the attribute variable
    '''

@accepts(t.uint, t.uint, t.sizei, POINTER(t.sizei), POINTER(t.int), POINTER(t.enum), t.char_p)
@returns(t.void)
@binds(dll)
def get_active_uniform(program, index, bufsize, length, size, type, name):
    '''
    Returns information about an active uniform variable for the specified program object
    
    Args:
        program: Specifies the program object to be queried
        index: Specifies the index of the uniform variable to be queried
        bufsize: Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name
        length: Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than None is passed
        size: Returns the size of the uniform variable
        type: Returns the data type of the uniform variable
        name: Returns a null terminated string containing the name of the uniform variable
    '''

@accepts(t.uint, t.sizei, POINTER(t.sizei), POINTER(t.uint))
@returns(t.void)
@binds(dll)
def get_attached_shaders(program, maxcount, count, shaders):
    '''
    Returns the handles of the shader objects attached to a program object
    
    Args:
        program: Specifies the program object to be queried
        maxcount: Specifies the size of the array for storing the returned object names
        count: Returns the number of names actually returned in shaders
        shaders: Specifies an array that is used to return the names of attached shader objects
    '''

@accepts(t.uint, t.char_p)
@returns(t.int)
@binds(dll)
def get_attrib_location(program, name):
    '''
    Returns the location of an attribute variable
    
    Args:
        program: Specifies the program object to be queried
        name: Points to a null terminated string containing the name of the attribute variable whose location is to be queried
    '''

@accepts(t.enum, POINTER(t.boolean))
@returns(t.void)
@binds(dll)
def get_booleanv(pname, data):
    pass

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_buffer_parameteriv(target, pname, params):
    '''
    return parameters of a buffer object
    
    Args:
        target: Specifies the target buffer object
    '''

@accepts()
@returns(t.enum)
@binds(dll)
def get_error():
    '''
    return error information
    
    Args:
    '''

@accepts(t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def get_floatv(pname, data):
    pass

@accepts(t.enum, t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_framebuffer_attachment_parameteriv(target, attachment, pname, params):
    pass

@accepts(t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_integerv(pname, data):
    pass

@accepts(t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_programiv(program, pname, params):
    pass

@accepts(t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_program_info_log(program, bufsize, length, infolog):
    '''
    Returns the information log for a program object
    
    Args:
        program: Specifies the program object whose information log is to be queried
        length: Returns the length of the string returned in infoLog (excluding the null terminator)
        infolog: Specifies an array of characters that is used to return the information log
    '''

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_renderbuffer_parameteriv(target, pname, params):
    pass

@accepts(t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_shaderiv(shader, pname, params):
    pass

@accepts(t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_shader_info_log(shader, bufsize, length, infolog):
    '''
    Returns the information log for a shader object
    
    Args:
        shader: Specifies the shader object whose information log is to be queried
        length: Returns the length of the string returned in infoLog (excluding the null terminator)
        infolog: Specifies an array of characters that is used to return the information log
    '''

@accepts(t.enum, t.enum, POINTER(t.int), POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_shader_precision_format(shadertype, precisiontype, range, precision):
    '''
    retrieve the range and precision for numeric formats supported by the shader compiler
    
    Args:
        shadertype: Specifies the type of shader whose precision to query
        precisiontype: Specifies the numeric format whose precision and range to query
        range: Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned
        precision: Specifies the address of an integer into which the numeric precision of the implementation is written
    '''

@accepts(t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_shader_source(shader, bufsize, length, source):
    '''
    Returns the source code string from a shader object
    
    Args:
        shader: Specifies the shader object to be queried
        bufsize: Specifies the size of the character buffer for storing the returned source code string
        length: Returns the length of the string returned in source (excluding the null terminator)
        source: Specifies an array of characters that is used to return the source code string
    '''

@accepts(t.enum)
@returns(POINTER(t.ubyte))
@binds(dll)
def get_string(name):
    '''
    return a string describing the current GL connection
    
    Args:
        name: Specifies a symbolic constant, one of gl.VENDOR, gl.RENDERER, gl.VERSION, or gl.SHADING_LANGUAGE_VERSION
    '''

@accepts(t.enum, t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def get_tex_parameterfv(target, pname, params):
    pass

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_tex_parameteriv(target, pname, params):
    pass

@accepts(t.uint, t.int, POINTER(t.float))
@returns(t.void)
@binds(dll)
def get_uniformfv(program, location, params):
    pass

@accepts(t.uint, t.int, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_uniformiv(program, location, params):
    pass

@accepts(t.uint, t.char_p)
@returns(t.int)
@binds(dll)
def get_uniform_location(program, name):
    '''
    Returns the location of a uniform variable
    
    Args:
        program: Specifies the program object to be queried
        name: Points to a null terminated string containing the name of the uniform variable whose location is to be queried
    '''

@accepts(t.uint, t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def get_vertex_attribfv(index, pname, params):
    pass

@accepts(t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_vertex_attribiv(index, pname, params):
    pass

@accepts(t.uint, t.enum, t.void)
@returns(t.void)
@binds(dll)
def get_vertex_attrib_pointerv(index, pname, pointer):
    '''
    return the address of the specified generic vertex attribute pointer
    
    Args:
        index: Specifies the generic vertex attribute parameter to be returned
        pname: Specifies the symbolic name of the generic vertex attribute parameter to be returned
        pointer: Returns the pointer value
    '''

@accepts(t.enum, t.enum)
@returns(t.void)
@binds(dll)
def hint(target, mode):
    '''
    specify implementation-specific hints
    
    Args:
        target: Specifies a symbolic constant indicating the behavior to be controlled
        mode: Specifies a symbolic constant indicating the desired behavior
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_buffer(buffer):
    '''
    determine if a name corresponds to a buffer object
    
    Args:
        buffer: Specifies a value that may be the name of a buffer object
    '''

@accepts(t.enum)
@returns(t.boolean)
@binds(dll)
def is_enabled(cap):
    '''
    test whether a capability is enabled
    
    Args:
        cap: Specifies a symbolic constant indicating a GL capability
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_framebuffer(framebuffer):
    '''
    determine if a name corresponds to a framebuffer object
    
    Args:
        framebuffer: Specifies a value that may be the name of a framebuffer object
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_program(program):
    '''
    Determines if a name corresponds to a program object
    
    Args:
        program: Specifies a potential program object
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_renderbuffer(renderbuffer):
    '''
    determine if a name corresponds to a renderbuffer object
    
    Args:
        renderbuffer: Specifies a value that may be the name of a renderbuffer object
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_shader(shader):
    '''
    Determines if a name corresponds to a shader object
    
    Args:
        shader: Specifies a potential shader object
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_texture(texture):
    '''
    determine if a name corresponds to a texture
    
    Args:
        texture: Specifies a value that may be the name of a texture
    '''

@accepts(t.float)
@returns(t.void)
@binds(dll)
def line_width(width):
    '''
    specify the width of rasterized lines
    
    Args:
        width: Specifies the width of rasterized lines
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def link_program(program):
    '''
    Links a program object
    
    Args:
        program: Specifies the handle of the program object to be linked
    '''

@accepts(t.enum, t.int)
@returns(t.void)
@binds(dll)
def pixel_storei(pname, param):
    pass

@accepts(t.float, t.float)
@returns(t.void)
@binds(dll)
def polygon_offset(factor, units):
    '''
    set the scale and units used to calculate depth values
    
    Args:
        factor: Specifies a scale factor that is used to create a variable depth offset for each polygon
        units: Is multiplied by an implementation-specific value to create a constant depth offset
    '''

@accepts(t.int, t.int, t.sizei, t.sizei, t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def read_pixels(x, y, width, height, format, type, pixels):
    '''
    read a block of pixels from the frame buffer
    
    Args:
        x, y: Specify the window coordinates of the first pixel that is read from the frame buffer
        width, height: Specify the dimensions of the pixel rectangle
        format: Specifies the format of the pixel data
        type: Specifies the data type of the pixel data
    '''

@accepts()
@returns(t.void)
@binds(dll)
def release_shader_compiler():
    '''
    release resources consumed by the implementation's shader compiler
    
    Args:
    '''

@accepts(t.enum, t.enum, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def renderbuffer_storage(target, internalformat, width, height):
    '''
    establish data storage, format and dimensions of a renderbuffer object's image
    
    Args:
        target: Specifies a binding target of the allocation for gl.renderbuffer_storage function
        internalformat: Specifies the internal format to use for the renderbuffer object's image
        width: Specifies the width of the renderbuffer, in pixels
        height: Specifies the height of the renderbuffer, in pixels
    '''

@accepts(t.float, t.boolean)
@returns(t.void)
@binds(dll)
def sample_coverage(value, invert):
    '''
    specify multisample coverage parameters
    
    Args:
        value: Specify a single floating-point sample coverage value
        invert: Specify a single boolean value representing if the coverage masks should be inverted
    '''

@accepts(t.int, t.int, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def scissor(x, y, width, height):
    '''
    define the scissor box
    
    Args:
        x, y: Specify the lower left corner of the scissor box
        width, height: Specify the width and height of the scissor box
    '''

@accepts(t.sizei, POINTER(t.uint), t.enum, t.void, t.sizei)
@returns(t.void)
@binds(dll)
def shader_binary(count, shaders, binaryformat, binary, length):
    '''
    load pre-compiled shader binaries
    
    Args:
        count: Specifies the number of shader object handles contained in shaders
        shaders: Specifies the address of an array of shader handles into which to load pre-compiled shader binaries
        binaryformat: Specifies the format of the shader binaries contained in binary
        binary: Specifies the address of an array of bytes containing pre-compiled binary shader code
        length: Specifies the length of the array whose address is given in binary
    '''

@accepts(t.uint, t.sizei, POINTER(t.char_p), POINTER(t.int))
@returns(t.void)
@binds(dll)
def shader_source(shader, count, string, length):
    '''
    Replaces the source code in a shader object
    
    Args:
        shader: Specifies the handle of the shader object whose source code is to be replaced
        count: Specifies the number of elements in the string and length arrays
        string: Specifies an array of pointers to strings containing the source code to be loaded into the shader
        length: Specifies an array of string lengths
    '''

@accepts(t.enum, t.int, t.uint)
@returns(t.void)
@binds(dll)
def stencil_func(func, ref, mask):
    '''
    set front and back function and reference value for stencil testing
    
    Args:
        func: Specifies the test function
        ref: Specifies the reference value for the stencil test
        mask: Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done
    '''

@accepts(t.enum, t.enum, t.int, t.uint)
@returns(t.void)
@binds(dll)
def stencil_func_separate(face, func, ref, mask):
    '''
    set front and/or back function and reference value for stencil testing
    
    Args:
        face: Specifies whether front and/or back stencil state is updated
        func: Specifies the test function
        ref: Specifies the reference value for the stencil test
        mask: Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def stencil_mask(mask):
    '''
    control the front and back writing of individual bits in the stencil planes
    
    Args:
        mask: Specifies a bit mask to enable and disable writing of individual bits in the stencil planes
    '''

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def stencil_mask_separate(face, mask):
    '''
    control the front and/or back writing of individual bits in the stencil planes
    
    Args:
        face: Specifies whether the front and/or back stencil writemask is updated
        mask: Specifies a bit mask to enable and disable writing of individual bits in the stencil planes
    '''

@accepts(t.enum, t.enum, t.enum)
@returns(t.void)
@binds(dll)
def stencil_op(fail, zfail, zpass):
    '''
    set front and back stencil test actions
    
    Args:
    '''

@accepts(t.enum, t.enum, t.enum, t.enum)
@returns(t.void)
@binds(dll)
def stencil_op_separate(face, sfail, dpfail, dppass):
    '''
    set front and/or back stencil test actions
    
    Args:
        face: Specifies whether front and/or back stencil state is updated
        sfail: Specifies the action to take when the stencil test fails
        dpfail: Specifies the stencil action when the stencil test passes, but the depth test fails
        dppass: Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled
    '''

@accepts(t.enum, t.int, t.int, t.sizei, t.sizei, t.int, t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def tex_image2_d(target, level, internalformat, width, height, border, format, type, pixels):
    '''
    specify a two-dimensional texture image
    
    Args:
        target: Specifies the target texture
        level: Specifies the level-of-detail number
        internalformat: Specifies the number of color components in the texture
        width: Specifies the width of the texture image
        height: Specifies the height of the texture image, or the number of layers in a texture array, in the case of the gl.TEXTURE_1D_ARRAY and gl.PROXY_TEXTURE_1D_ARRAY targets
        border: This value must be 0
        format: Specifies the format of the pixel data
        type: Specifies the data type of the pixel data
    '''

@accepts(t.enum, t.enum, t.float)
@returns(t.void)
@binds(dll)
def tex_parameterf(target, pname, param):
    pass

@accepts(t.enum, t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def tex_parameterfv(target, pname, params):
    pass

@accepts(t.enum, t.enum, t.int)
@returns(t.void)
@binds(dll)
def tex_parameteri(target, pname, param):
    pass

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def tex_parameteriv(target, pname, params):
    pass

@accepts(t.enum, t.int, t.int, t.int, t.sizei, t.sizei, t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def tex_sub_image2_d(target, level, xoffset, yoffset, width, height, format, type, pixels):
    '''
    specify a two-dimensional texture subimage
    
    Args:
        target: Specifies the target to which the texture is bound for gl.tex_sub_image2D
        level: Specifies the level-of-detail number
        xoffset: Specifies a texel offset in the x direction within the texture array
        yoffset: Specifies a texel offset in the y direction within the texture array
        width: Specifies the width of the texture subimage
        height: Specifies the height of the texture subimage
        format: Specifies the format of the pixel data
        type: Specifies the data type of the pixel data
        pixels: Specifies a pointer to the image data in memory
    '''

@accepts(t.int, t.float)
@returns(t.void)
@binds(dll)
def uniform1f(location, v0):
    pass

@accepts(t.int, t.sizei, POINTER(t.float))
@returns(t.void)
@binds(dll)
def uniform1fv(location, count, value):
    pass

@accepts(t.int, t.int)
@returns(t.void)
@binds(dll)
def uniform1i(location, v0):
    pass

@accepts(t.int, t.sizei, POINTER(t.int))
@returns(t.void)
@binds(dll)
def uniform1iv(location, count, value):
    pass

@accepts(t.int, t.float, t.float)
@returns(t.void)
@binds(dll)
def uniform2f(location, v0, v1):
    pass

@accepts(t.int, t.sizei, POINTER(t.float))
@returns(t.void)
@binds(dll)
def uniform2fv(location, count, value):
    pass

@accepts(t.int, t.int, t.int)
@returns(t.void)
@binds(dll)
def uniform2i(location, v0, v1):
    pass

@accepts(t.int, t.sizei, POINTER(t.int))
@returns(t.void)
@binds(dll)
def uniform2iv(location, count, value):
    pass

@accepts(t.int, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def uniform3f(location, v0, v1, v2):
    pass

@accepts(t.int, t.sizei, POINTER(t.float))
@returns(t.void)
@binds(dll)
def uniform3fv(location, count, value):
    pass

@accepts(t.int, t.int, t.int, t.int)
@returns(t.void)
@binds(dll)
def uniform3i(location, v0, v1, v2):
    pass

@accepts(t.int, t.sizei, POINTER(t.int))
@returns(t.void)
@binds(dll)
def uniform3iv(location, count, value):
    pass

@accepts(t.int, t.float, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def uniform4f(location, v0, v1, v2, v3):
    pass

@accepts(t.int, t.sizei, POINTER(t.float))
@returns(t.void)
@binds(dll)
def uniform4fv(location, count, value):
    pass

@accepts(t.int, t.int, t.int, t.int, t.int)
@returns(t.void)
@binds(dll)
def uniform4i(location, v0, v1, v2, v3):
    pass

@accepts(t.int, t.sizei, POINTER(t.int))
@returns(t.void)
@binds(dll)
def uniform4iv(location, count, value):
    pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.float))
@returns(t.void)
@binds(dll)
def uniform_matrix2fv(location, count, transpose, value):
    pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.float))
@returns(t.void)
@binds(dll)
def uniform_matrix3fv(location, count, transpose, value):
    pass

@accepts(t.int, t.sizei, t.boolean, POINTER(t.float))
@returns(t.void)
@binds(dll)
def uniform_matrix4fv(location, count, transpose, value):
    pass

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def use_program(program):
    '''
    Installs a program object as part of current rendering state
    
    Args:
        program: Specifies the handle of the program object whose executables are to be used as part of current rendering state
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def validate_program(program):
    '''
    Validates a program object
    
    Args:
        program: Specifies the handle of the program object to be validated
    '''

@accepts(t.uint, t.float)
@returns(t.void)
@binds(dll)
def vertex_attrib1f(index, x):
    pass

@accepts(t.uint, POINTER(t.float))
@returns(t.void)
@binds(dll)
def vertex_attrib1fv(index, v):
    pass

@accepts(t.uint, t.float, t.float)
@returns(t.void)
@binds(dll)
def vertex_attrib2f(index, x, y):
    pass

@accepts(t.uint, POINTER(t.float))
@returns(t.void)
@binds(dll)
def vertex_attrib2fv(index, v):
    pass

@accepts(t.uint, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def vertex_attrib3f(index, x, y, z):
    pass

@accepts(t.uint, POINTER(t.float))
@returns(t.void)
@binds(dll)
def vertex_attrib3fv(index, v):
    pass

@accepts(t.uint, t.float, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def vertex_attrib4f(index, x, y, z, w):
    pass

@accepts(t.uint, POINTER(t.float))
@returns(t.void)
@binds(dll)
def vertex_attrib4fv(index, v):
    pass

@accepts(t.uint, t.int, t.enum, t.boolean, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def vertex_attrib_pointer(index, size, type, normalized, stride, pointer):
    '''
    define an array of generic vertex attribute data
    
    Args:
        index: Specifies the index of the generic vertex attribute to be modified
        size: Specifies the number of components per generic vertex attribute
        type: Specifies the data type of each component in the array
        normalized: For gl.vertex_attrib_pointer, specifies whether fixed-point data values should be normalized (gl.TRUE) or converted directly as fixed-point values (gl.FALSE) when they are accessed
        stride: Specifies the byte offset between consecutive generic vertex attributes
        pointer: Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the gl.ARRAY_BUFFER target
    '''

@accepts(t.int, t.int, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def viewport(x, y, width, height):
    '''
    set the viewport
    
    Args:
        x, y: Specify the lower left corner of the viewport rectangle, in pixels
        width, height: Specify the width and height of the viewport
    '''

DEPTH_BUFFER_BIT = 0x00000100
STENCIL_BUFFER_BIT = 0x00000400
COLOR_BUFFER_BIT = 0x00004000
FALSE = 0
TRUE = 1
POINTS = 0x0000
LINES = 0x0001
LINE_LOOP = 0x0002
LINE_STRIP = 0x0003
TRIANGLES = 0x0004
TRIANGLE_STRIP = 0x0005
TRIANGLE_FAN = 0x0006
ZERO = 0
ONE = 1
SRC_COLOR = 0x0300
ONE_MINUS_SRC_COLOR = 0x0301
SRC_ALPHA = 0x0302
ONE_MINUS_SRC_ALPHA = 0x0303
DST_ALPHA = 0x0304
ONE_MINUS_DST_ALPHA = 0x0305
DST_COLOR = 0x0306
ONE_MINUS_DST_COLOR = 0x0307
SRC_ALPHA_SATURATE = 0x0308
FUNC_ADD = 0x8006
BLEND_EQUATION = 0x8009
BLEND_EQUATION_RGB = 0x8009
BLEND_EQUATION_ALPHA = 0x883D
FUNC_SUBTRACT = 0x800A
FUNC_REVERSE_SUBTRACT = 0x800B
BLEND_DST_RGB = 0x80C8
BLEND_SRC_RGB = 0x80C9
BLEND_DST_ALPHA = 0x80CA
BLEND_SRC_ALPHA = 0x80CB
CONSTANT_COLOR = 0x8001
ONE_MINUS_CONSTANT_COLOR = 0x8002
CONSTANT_ALPHA = 0x8003
ONE_MINUS_CONSTANT_ALPHA = 0x8004
BLEND_COLOR = 0x8005
ARRAY_BUFFER = 0x8892
ELEMENT_ARRAY_BUFFER = 0x8893
ARRAY_BUFFER_BINDING = 0x8894
ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
STREAM_DRAW = 0x88E0
STATIC_DRAW = 0x88E4
DYNAMIC_DRAW = 0x88E8
BUFFER_SIZE = 0x8764
BUFFER_USAGE = 0x8765
CURRENT_VERTEX_ATTRIB = 0x8626
FRONT = 0x0404
BACK = 0x0405
FRONT_AND_BACK = 0x0408
TEXTURE_2D = 0x0DE1
CULL_FACE = 0x0B44
BLEND = 0x0BE2
DITHER = 0x0BD0
STENCIL_TEST = 0x0B90
DEPTH_TEST = 0x0B71
SCISSOR_TEST = 0x0C11
POLYGON_OFFSET_FILL = 0x8037
SAMPLE_ALPHA_TO_COVERAGE = 0x809E
SAMPLE_COVERAGE = 0x80A0
NO_ERROR = 0
INVALID_ENUM = 0x0500
INVALID_VALUE = 0x0501
INVALID_OPERATION = 0x0502
OUT_OF_MEMORY = 0x0505
CW = 0x0900
CCW = 0x0901
LINE_WIDTH = 0x0B21
ALIASED_POINT_SIZE_RANGE = 0x846D
ALIASED_LINE_WIDTH_RANGE = 0x846E
CULL_FACE_MODE = 0x0B45
FRONT_FACE = 0x0B46
DEPTH_RANGE = 0x0B70
DEPTH_WRITEMASK = 0x0B72
DEPTH_CLEAR_VALUE = 0x0B73
DEPTH_FUNC = 0x0B74
STENCIL_CLEAR_VALUE = 0x0B91
STENCIL_FUNC = 0x0B92
STENCIL_FAIL = 0x0B94
STENCIL_PASS_DEPTH_FAIL = 0x0B95
STENCIL_PASS_DEPTH_PASS = 0x0B96
STENCIL_REF = 0x0B97
STENCIL_VALUE_MASK = 0x0B93
STENCIL_WRITEMASK = 0x0B98
STENCIL_BACK_FUNC = 0x8800
STENCIL_BACK_FAIL = 0x8801
STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
STENCIL_BACK_REF = 0x8CA3
STENCIL_BACK_VALUE_MASK = 0x8CA4
STENCIL_BACK_WRITEMASK = 0x8CA5
VIEWPORT = 0x0BA2
SCISSOR_BOX = 0x0C10
COLOR_CLEAR_VALUE = 0x0C22
COLOR_WRITEMASK = 0x0C23
UNPACK_ALIGNMENT = 0x0CF5
PACK_ALIGNMENT = 0x0D05
MAX_TEXTURE_SIZE = 0x0D33
MAX_VIEWPORT_DIMS = 0x0D3A
SUBPIXEL_BITS = 0x0D50
RED_BITS = 0x0D52
GREEN_BITS = 0x0D53
BLUE_BITS = 0x0D54
ALPHA_BITS = 0x0D55
DEPTH_BITS = 0x0D56
STENCIL_BITS = 0x0D57
POLYGON_OFFSET_UNITS = 0x2A00
POLYGON_OFFSET_FACTOR = 0x8038
TEXTURE_BINDING_2D = 0x8069
SAMPLE_BUFFERS = 0x80A8
SAMPLES = 0x80A9
SAMPLE_COVERAGE_VALUE = 0x80AA
SAMPLE_COVERAGE_INVERT = 0x80AB
NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
COMPRESSED_TEXTURE_FORMATS = 0x86A3
DONT_CARE = 0x1100
FASTEST = 0x1101
NICEST = 0x1102
GENERATE_MIPMAP_HINT = 0x8192
BYTE = 0x1400
UNSIGNED_BYTE = 0x1401
SHORT = 0x1402
UNSIGNED_SHORT = 0x1403
INT = 0x1404
UNSIGNED_INT = 0x1405
FLOAT = 0x1406
FIXED = 0x140C
DEPTH_COMPONENT = 0x1902
ALPHA = 0x1906
RGB = 0x1907
RGBA = 0x1908
LUMINANCE = 0x1909
LUMINANCE_ALPHA = 0x190A
UNSIGNED_SHORT_4_4_4_4 = 0x8033
UNSIGNED_SHORT_5_5_5_1 = 0x8034
UNSIGNED_SHORT_5_6_5 = 0x8363
FRAGMENT_SHADER = 0x8B30
VERTEX_SHADER = 0x8B31
MAX_VERTEX_ATTRIBS = 0x8869
MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB
MAX_VARYING_VECTORS = 0x8DFC
MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
MAX_TEXTURE_IMAGE_UNITS = 0x8872
MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD
SHADER_TYPE = 0x8B4F
DELETE_STATUS = 0x8B80
LINK_STATUS = 0x8B82
VALIDATE_STATUS = 0x8B83
ATTACHED_SHADERS = 0x8B85
ACTIVE_UNIFORMS = 0x8B86
ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
ACTIVE_ATTRIBUTES = 0x8B89
ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
SHADING_LANGUAGE_VERSION = 0x8B8C
CURRENT_PROGRAM = 0x8B8D
NEVER = 0x0200
LESS = 0x0201
EQUAL = 0x0202
LEQUAL = 0x0203
GREATER = 0x0204
NOTEQUAL = 0x0205
GEQUAL = 0x0206
ALWAYS = 0x0207
KEEP = 0x1E00
REPLACE = 0x1E01
INCR = 0x1E02
DECR = 0x1E03
INVERT = 0x150A
INCR_WRAP = 0x8507
DECR_WRAP = 0x8508
VENDOR = 0x1F00
RENDERER = 0x1F01
VERSION = 0x1F02
EXTENSIONS = 0x1F03
NEAREST = 0x2600
LINEAR = 0x2601
NEAREST_MIPMAP_NEAREST = 0x2700
LINEAR_MIPMAP_NEAREST = 0x2701
NEAREST_MIPMAP_LINEAR = 0x2702
LINEAR_MIPMAP_LINEAR = 0x2703
TEXTURE_MAG_FILTER = 0x2800
TEXTURE_MIN_FILTER = 0x2801
TEXTURE_WRAP_S = 0x2802
TEXTURE_WRAP_T = 0x2803
TEXTURE = 0x1702
TEXTURE_CUBE_MAP = 0x8513
TEXTURE_BINDING_CUBE_MAP = 0x8514
TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
TEXTURE0 = 0x84C0
TEXTURE1 = 0x84C1
TEXTURE2 = 0x84C2
TEXTURE3 = 0x84C3
TEXTURE4 = 0x84C4
TEXTURE5 = 0x84C5
TEXTURE6 = 0x84C6
TEXTURE7 = 0x84C7
TEXTURE8 = 0x84C8
TEXTURE9 = 0x84C9
TEXTURE10 = 0x84CA
TEXTURE11 = 0x84CB
TEXTURE12 = 0x84CC
TEXTURE13 = 0x84CD
TEXTURE14 = 0x84CE
TEXTURE15 = 0x84CF
TEXTURE16 = 0x84D0
TEXTURE17 = 0x84D1
TEXTURE18 = 0x84D2
TEXTURE19 = 0x84D3
TEXTURE20 = 0x84D4
TEXTURE21 = 0x84D5
TEXTURE22 = 0x84D6
TEXTURE23 = 0x84D7
TEXTURE24 = 0x84D8
TEXTURE25 = 0x84D9
TEXTURE26 = 0x84DA
TEXTURE27 = 0x84DB
TEXTURE28 = 0x84DC
TEXTURE29 = 0x84DD
TEXTURE30 = 0x84DE
TEXTURE31 = 0x84DF
ACTIVE_TEXTURE = 0x84E0
REPEAT = 0x2901
CLAMP_TO_EDGE = 0x812F
MIRRORED_REPEAT = 0x8370
FLOAT_VEC2 = 0x8B50
FLOAT_VEC3 = 0x8B51
FLOAT_VEC4 = 0x8B52
INT_VEC2 = 0x8B53
INT_VEC3 = 0x8B54
INT_VEC4 = 0x8B55
BOOL = 0x8B56
BOOL_VEC2 = 0x8B57
BOOL_VEC3 = 0x8B58
BOOL_VEC4 = 0x8B59
FLOAT_MAT2 = 0x8B5A
FLOAT_MAT3 = 0x8B5B
FLOAT_MAT4 = 0x8B5C
SAMPLER_2D = 0x8B5E
SAMPLER_CUBE = 0x8B60
VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A
IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B
COMPILE_STATUS = 0x8B81
INFO_LOG_LENGTH = 0x8B84
SHADER_SOURCE_LENGTH = 0x8B88
SHADER_COMPILER = 0x8DFA
SHADER_BINARY_FORMATS = 0x8DF8
NUM_SHADER_BINARY_FORMATS = 0x8DF9
LOW_FLOAT = 0x8DF0
MEDIUM_FLOAT = 0x8DF1
HIGH_FLOAT = 0x8DF2
LOW_INT = 0x8DF3
MEDIUM_INT = 0x8DF4
HIGH_INT = 0x8DF5
FRAMEBUFFER = 0x8D40
RENDERBUFFER = 0x8D41
RGBA4 = 0x8056
RGB5_A1 = 0x8057
RGB565 = 0x8D62
DEPTH_COMPONENT16 = 0x81A5
STENCIL_INDEX8 = 0x8D48
RENDERBUFFER_WIDTH = 0x8D42
RENDERBUFFER_HEIGHT = 0x8D43
RENDERBUFFER_INTERNAL_FORMAT = 0x8D44
RENDERBUFFER_RED_SIZE = 0x8D50
RENDERBUFFER_GREEN_SIZE = 0x8D51
RENDERBUFFER_BLUE_SIZE = 0x8D52
RENDERBUFFER_ALPHA_SIZE = 0x8D53
RENDERBUFFER_DEPTH_SIZE = 0x8D54
RENDERBUFFER_STENCIL_SIZE = 0x8D55
FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0
FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1
FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2
FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3
COLOR_ATTACHMENT0 = 0x8CE0
DEPTH_ATTACHMENT = 0x8D00
STENCIL_ATTACHMENT = 0x8D20
NONE = 0
FRAMEBUFFER_COMPLETE = 0x8CD5
FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6
FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7
FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9
FRAMEBUFFER_UNSUPPORTED = 0x8CDD
FRAMEBUFFER_BINDING = 0x8CA6
RENDERBUFFER_BINDING = 0x8CA7
MAX_RENDERBUFFER_SIZE = 0x84E8
INVALID_FRAMEBUFFER_OPERATION = 0x0506