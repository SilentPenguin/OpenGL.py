#BEWARE: automatically generated code
#This code was generated by opengl/gl/generate/__main__.py

from opengl.gl.raw.bindings import *

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def active_texture(texture): pass

@accepts(t.float, t.boolean)
@returns(t.void)
@binds(dll)
def sample_coverage(value, invert): pass

@accepts(t.enum, t.int, t.enum, t.sizei, t.sizei, t.sizei, t.int, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_image3_d(target, level, internalformat, width, height, depth, border, imageSize, data): pass

@accepts(t.enum, t.int, t.enum, t.sizei, t.sizei, t.int, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_image2_d(target, level, internalformat, width, height, border, imageSize, data): pass

@accepts(t.enum, t.int, t.enum, t.sizei, t.int, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_image1_d(target, level, internalformat, width, border, imageSize, data): pass

@accepts(t.enum, t.int, t.int, t.int, t.int, t.sizei, t.sizei, t.sizei, t.enum, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_sub_image3_d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data): pass

@accepts(t.enum, t.int, t.int, t.int, t.sizei, t.sizei, t.enum, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_sub_image2_d(target, level, xoffset, yoffset, width, height, format, imageSize, data): pass

@accepts(t.enum, t.int, t.int, t.sizei, t.enum, t.sizei, t.void)
@returns(t.void)
@binds(dll)
def compressed_tex_sub_image1_d(target, level, xoffset, width, format, imageSize, data): pass

@accepts(t.enum, t.int, t.void)
@returns(t.void)
@binds(dll)
def get_compressed_tex_image(target, level, img): pass

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def client_active_texture(texture): pass

@accepts(t.enum, t.double)
@returns(t.void)
@binds(dll)
def multi_tex_coord1d(target, s): pass

@accepts(t.enum, POINTER(t.double))
@returns(t.void)
@binds(dll)
def multi_tex_coord1dv(target, v): pass

@accepts(t.enum, t.float)
@returns(t.void)
@binds(dll)
def multi_tex_coord1f(target, s): pass

@accepts(t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def multi_tex_coord1fv(target, v): pass

@accepts(t.enum, t.int)
@returns(t.void)
@binds(dll)
def multi_tex_coord1i(target, s): pass

@accepts(t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def multi_tex_coord1iv(target, v): pass

@accepts(t.enum, t.short)
@returns(t.void)
@binds(dll)
def multi_tex_coord1s(target, s): pass

@accepts(t.enum, POINTER(t.short))
@returns(t.void)
@binds(dll)
def multi_tex_coord1sv(target, v): pass

@accepts(t.enum, t.double, t.double)
@returns(t.void)
@binds(dll)
def multi_tex_coord2d(target, s, t): pass

@accepts(t.enum, POINTER(t.double))
@returns(t.void)
@binds(dll)
def multi_tex_coord2dv(target, v): pass

@accepts(t.enum, t.float, t.float)
@returns(t.void)
@binds(dll)
def multi_tex_coord2f(target, s, t): pass

@accepts(t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def multi_tex_coord2fv(target, v): pass

@accepts(t.enum, t.int, t.int)
@returns(t.void)
@binds(dll)
def multi_tex_coord2i(target, s, t): pass

@accepts(t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def multi_tex_coord2iv(target, v): pass

@accepts(t.enum, t.short, t.short)
@returns(t.void)
@binds(dll)
def multi_tex_coord2s(target, s, t): pass

@accepts(t.enum, POINTER(t.short))
@returns(t.void)
@binds(dll)
def multi_tex_coord2sv(target, v): pass

@accepts(t.enum, t.double, t.double, t.double)
@returns(t.void)
@binds(dll)
def multi_tex_coord3d(target, s, t, r): pass

@accepts(t.enum, POINTER(t.double))
@returns(t.void)
@binds(dll)
def multi_tex_coord3dv(target, v): pass

@accepts(t.enum, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def multi_tex_coord3f(target, s, t, r): pass

@accepts(t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def multi_tex_coord3fv(target, v): pass

@accepts(t.enum, t.int, t.int, t.int)
@returns(t.void)
@binds(dll)
def multi_tex_coord3i(target, s, t, r): pass

@accepts(t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def multi_tex_coord3iv(target, v): pass

@accepts(t.enum, t.short, t.short, t.short)
@returns(t.void)
@binds(dll)
def multi_tex_coord3s(target, s, t, r): pass

@accepts(t.enum, POINTER(t.short))
@returns(t.void)
@binds(dll)
def multi_tex_coord3sv(target, v): pass

@accepts(t.enum, t.double, t.double, t.double, t.double)
@returns(t.void)
@binds(dll)
def multi_tex_coord4d(target, s, t, r, q): pass

@accepts(t.enum, POINTER(t.double))
@returns(t.void)
@binds(dll)
def multi_tex_coord4dv(target, v): pass

@accepts(t.enum, t.float, t.float, t.float, t.float)
@returns(t.void)
@binds(dll)
def multi_tex_coord4f(target, s, t, r, q): pass

@accepts(t.enum, POINTER(t.float))
@returns(t.void)
@binds(dll)
def multi_tex_coord4fv(target, v): pass

@accepts(t.enum, t.int, t.int, t.int, t.int)
@returns(t.void)
@binds(dll)
def multi_tex_coord4i(target, s, t, r, q): pass

@accepts(t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def multi_tex_coord4iv(target, v): pass

@accepts(t.enum, t.short, t.short, t.short, t.short)
@returns(t.void)
@binds(dll)
def multi_tex_coord4s(target, s, t, r, q): pass

@accepts(t.enum, POINTER(t.short))
@returns(t.void)
@binds(dll)
def multi_tex_coord4sv(target, v): pass

@accepts(POINTER(t.float))
@returns(t.void)
@binds(dll)
def load_transpose_matrixf(m): pass

@accepts(POINTER(t.double))
@returns(t.void)
@binds(dll)
def load_transpose_matrixd(m): pass

@accepts(POINTER(t.float))
@returns(t.void)
@binds(dll)
def mult_transpose_matrixf(m): pass

@accepts(POINTER(t.double))
@returns(t.void)
@binds(dll)
def mult_transpose_matrixd(m): pass

TEXTURE0 = 0x84C0
TEXTURE1 = 0x84C1
TEXTURE2 = 0x84C2
TEXTURE3 = 0x84C3
TEXTURE4 = 0x84C4
TEXTURE5 = 0x84C5
TEXTURE6 = 0x84C6
TEXTURE7 = 0x84C7
TEXTURE8 = 0x84C8
TEXTURE9 = 0x84C9
TEXTURE10 = 0x84CA
TEXTURE11 = 0x84CB
TEXTURE12 = 0x84CC
TEXTURE13 = 0x84CD
TEXTURE14 = 0x84CE
TEXTURE15 = 0x84CF
TEXTURE16 = 0x84D0
TEXTURE17 = 0x84D1
TEXTURE18 = 0x84D2
TEXTURE19 = 0x84D3
TEXTURE20 = 0x84D4
TEXTURE21 = 0x84D5
TEXTURE22 = 0x84D6
TEXTURE23 = 0x84D7
TEXTURE24 = 0x84D8
TEXTURE25 = 0x84D9
TEXTURE26 = 0x84DA
TEXTURE27 = 0x84DB
TEXTURE28 = 0x84DC
TEXTURE29 = 0x84DD
TEXTURE30 = 0x84DE
TEXTURE31 = 0x84DF
ACTIVE_TEXTURE = 0x84E0
MULTISAMPLE = 0x809D
SAMPLE_ALPHA_TO_COVERAGE = 0x809E
SAMPLE_ALPHA_TO_ONE = 0x809F
SAMPLE_COVERAGE = 0x80A0
SAMPLE_BUFFERS = 0x80A8
SAMPLES = 0x80A9
SAMPLE_COVERAGE_VALUE = 0x80AA
SAMPLE_COVERAGE_INVERT = 0x80AB
TEXTURE_CUBE_MAP = 0x8513
TEXTURE_BINDING_CUBE_MAP = 0x8514
TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
PROXY_TEXTURE_CUBE_MAP = 0x851B
MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
COMPRESSED_RGB = 0x84ED
COMPRESSED_RGBA = 0x84EE
TEXTURE_COMPRESSION_HINT = 0x84EF
TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
TEXTURE_COMPRESSED = 0x86A1
NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
COMPRESSED_TEXTURE_FORMATS = 0x86A3
CLAMP_TO_BORDER = 0x812D
CLIENT_ACTIVE_TEXTURE = 0x84E1
MAX_TEXTURE_UNITS = 0x84E2
TRANSPOSE_MODELVIEW_MATRIX = 0x84E3
TRANSPOSE_PROJECTION_MATRIX = 0x84E4
TRANSPOSE_TEXTURE_MATRIX = 0x84E5
TRANSPOSE_COLOR_MATRIX = 0x84E6
MULTISAMPLE_BIT = 0x20000000
NORMAL_MAP = 0x8511
REFLECTION_MAP = 0x8512
COMPRESSED_ALPHA = 0x84E9
COMPRESSED_LUMINANCE = 0x84EA
COMPRESSED_LUMINANCE_ALPHA = 0x84EB
COMPRESSED_INTENSITY = 0x84EC
COMBINE = 0x8570
COMBINE_RGB = 0x8571
COMBINE_ALPHA = 0x8572
SOURCE0_RGB = 0x8580
SOURCE1_RGB = 0x8581
SOURCE2_RGB = 0x8582
SOURCE0_ALPHA = 0x8588
SOURCE1_ALPHA = 0x8589
SOURCE2_ALPHA = 0x858A
OPERAND0_RGB = 0x8590
OPERAND1_RGB = 0x8591
OPERAND2_RGB = 0x8592
OPERAND0_ALPHA = 0x8598
OPERAND1_ALPHA = 0x8599
OPERAND2_ALPHA = 0x859A
RGB_SCALE = 0x8573
ADD_SIGNED = 0x8574
INTERPOLATE = 0x8575
SUBTRACT = 0x84E7
CONSTANT = 0x8576
PRIMARY_COLOR = 0x8577
PREVIOUS = 0x8578
DOT3_RGB = 0x86AE
DOT3_RGBA = 0x86AF