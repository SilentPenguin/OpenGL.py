#BEWARE: automatically generated code
#This code was generated by /generate/__main__.py

from opengl.gl.raw.bindings import *

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_queries(n, ids):
    '''
    generate query object names.
    
    gl.gen_queries returns n query object names in ids. There is no guarantee
    that the names form a contiguous set of integers; however, it is guaranteed
    that none of the returned names was in use immediately before the call to
    gl.gen_queries.
    
    Args:
        n: the number of query object names to be generated.
        ids: an array in which the generated query object names are stored.
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_queries(n, ids):
    '''
    delete named query objects.
    
    gl.delete_queries deletes n query objects named by the elements of the array
    ids. After a query object is deleted, it has no contents, and its name is
    free for reuse.
    
    Args:
        n: the number of query objects to be deleted.
        ids: an array of query objects to be deleted.
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_query(id):
    '''
    determine if a name corresponds to a query object.
    
    gl.is_query returns gl.TRUE if id is currently the name of a query object.
    If id is zero, or is a non-zero value that is not currently the name of a
    query object, or if an error occurs, gl.is_query returns gl.FALSE.
    
    Args:
        id: a value that may be the name of a query object.
    '''

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def begin_query(target, id):
    '''
    delimit the boundaries of a query object.
    
    Args:
        target: the target type of query object established between glbeginquery
            and the subsequent glendquery.
        id: the name of a query object.
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def end_query(target):
    pass

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_queryiv(target, pname, params):
    '''
    return parameters of a query object target.
    
    gl.get_queryiv returns in params a selected parameter of the query object
    target specified by target.
    
    Args:
        target: a query object target.
        pname: the symbolic name of a query object target parameter.
        params: returns the requested data.
    '''

@accepts(t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_query_objectiv(id, pname, params):
    pass

@accepts(t.uint, t.enum, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def get_query_objectuiv(id, pname, params):
    pass

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def bind_buffer(target, buffer):
    '''
    bind a named buffer object.
    
    gl.bind_buffer binds a buffer object to the specified buffer binding point.
    Calling gl.bind_buffer with target set to one of the accepted symbolic
    constants and buffer set to the name of a buffer object binds that buffer
    object name to the target. If no buffer object with name buffer exists, one
    is created with that name. When a buffer object is bound to a target, the
    previous binding for that target is automatically broken.
    
    Args:
        target: the target to which the buffer object is bound, which must be
            one of the buffer binding targets in the following table:.
        buffer: the name of a buffer object.
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_buffers(n, buffers):
    '''
    delete named buffer objects.
    
    gl.delete_buffers deletes n buffer objects named by the elements of the
    array buffers. After a buffer object is deleted, it has no contents, and its
    name is free for reuse. If a buffer object that is currently bound is
    deleted, the binding reverts to 0.
    
    Args:
        n: the number of buffer objects to be deleted.
        buffers: an array of buffer objects to be deleted.
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_buffers(n, buffers):
    '''
    generate buffer object names.
    
    gl.gen_buffers returns n buffer object names in buffers. There is no
    guarantee that the names form a contiguous set of integers; however, it is
    guaranteed that none of the returned names was in use immediately before the
    call to gl.gen_buffers.
    
    Args:
        n: the number of buffer object names to be generated.
        buffers: an array in which the generated buffer object names are stored.
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_buffer(buffer):
    '''
    determine if a name corresponds to a buffer object.
    
    gl.is_buffer returns gl.TRUE if buffer is currently the name of a buffer
    object. If buffer is zero, or is a non-zero value that is not currently the
    name of a buffer object, or if an error occurs, gl.is_buffer returns
    gl.FALSE.
    
    Args:
        buffer: a value that may be the name of a buffer object.
    '''

@accepts(t.enum, t.sizeiptr, t.void, t.enum)
@returns(t.void)
@binds(dll)
def buffer_data(target, size, data, usage):
    '''
    creates and initializes a buffer object's data store.
    
    gl.buffer_data and gl.named_buffer_data create a new data store for a buffer
    object. In case of gl.buffer_data, the buffer object currently bound to
    target is used. For gl.named_buffer_data, a buffer object associated with ID
    specified by the caller in buffer will be used instead.
    
    Args:
        target: the target to which the buffer object is bound for glbufferdata,
            which must be one of the buffer binding targets in the following
            table:.
        size: the size in bytes of the buffer object's new data store.
        data: a pointer to data that will be copied into the data store for
            initialization, or null if no data is to be copied.
        usage: the expected usage pattern of the data store.
    '''

@accepts(t.enum, t.intptr, t.sizeiptr, t.void)
@returns(t.void)
@binds(dll)
def buffer_sub_data(target, offset, size, data):
    '''
    updates a subset of a buffer object's data store.
    
    gl.buffer_sub_data and gl.named_buffer_sub_data redefine some or all of the
    data store for the specified buffer object. Data starting at byte offset
    offset and extending for size bytes is copied to the data store from the
    memory pointed to by data. offset and size must define a range lying
    entirely within the buffer object's data store.
    
    Args:
        target: the target to which the buffer object is bound for
            glbuffersubdata, which must be one of the buffer binding targets in
            the following table:.
        offset: the offset into the buffer object's data store where data
            replacement will begin, measured in bytes.
        size: the size in bytes of the data store region being replaced.
        data: a pointer to the new data that will be copied into the data store.
    '''

@accepts(t.enum, t.intptr, t.sizeiptr, t.void)
@returns(t.void)
@binds(dll)
def get_buffer_sub_data(target, offset, size, data):
    '''
    returns a subset of a buffer object's data store.
    
    gl.get_buffer_sub_data and gl.get_named_buffer_sub_data return some or all
    of the data contents of the data store of the specified buffer object. Data
    starting at byte offset offset and extending for size bytes is copied from
    the buffer object's data store to the memory pointed to by data. An error is
    thrown if the buffer object is currently mapped, or if offset and size
    together define a range beyond the bounds of the buffer object's data store.
    
    Args:
        target: the target to which the buffer object is bound for
            glgetbuffersubdata, which must be one of the buffer binding targets
            in the following table:.
        offset: the offset into the buffer object's data store from which data
            will be returned, measured in bytes.
        size: the size in bytes of the data store region being returned.
        data: a pointer to the location where buffer object data is returned.
    '''

@accepts(t.enum, t.enum)
@returns(t.void)
@binds(dll)
def map_buffer(target, access):
    '''
    map all of a buffer object's data store into the client's address space.
    
    gl.map_buffer and gl.map_named_buffer map the entire data store of a
    specified buffer object into the client's address space. The data can then
    be directly read and/or written relative to the returned pointer, depending
    on the specified access policy.
    
    Args:
        target: the target to which the buffer object is bound for glmapbuffer,
            which must be one of the buffer binding targets in the following
            table:.
        access: the access policy for glmapbuffer and glmapnamedbuffer,
            indicating whether it will be possible to read from, write to, or
            both read from and write to the buffer object's mapped data store.
    '''

@accepts(t.enum)
@returns(t.boolean)
@binds(dll)
def unmap_buffer(target):
    '''
    release the mapping of a buffer object's data store into the client's
    address space.
    
    gl.unmap_buffer and gl.unmap_named_buffer unmap any mapping of a specified
    buffer object into the client's address space.
    
    Args:
        target: the target to which the buffer object is bound for
            glunmapbuffer, which must be one of the buffer binding targets in
            the following table:.
    '''

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_buffer_parameteriv(target, pname, params):
    '''
    return parameters of a buffer object.
    
    gl.get_buffer_parameteriv returns in data a selected parameter of the buffer
    object specified by target.
    
    Args:
        target: the target buffer object.
        pname: the symbolic name of a buffer object parameter.
        params: returns the requested parameter.
    '''

@accepts(t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def get_buffer_pointerv(target, pname, params):
    '''
    return the pointer to a mapped buffer object's data store.
    
    gl.get_buffer_pointerv and gl.get_named_buffer_pointerv return the buffer
    pointer pname, which must be gl.BUFFER_MAP_POINTER. The single buffer map
    pointer is returned in params. A None pointer is returned if the buffer
    object's data store is not currently mapped; or if the requesting context
    did not map the buffer object's data store, and the implementation is unable
    to support mappings on multiple clients.
    
    Args:
        target: the target to which the buffer object is bound for
            glgetbufferpointerv, which must be one of the buffer binding targets
            in the following table:.
        pname: the name of the pointer to be returned.
        params: returns the pointer value specified by pname.
    '''

BUFFER_SIZE = 0x8764
BUFFER_USAGE = 0x8765
QUERY_COUNTER_BITS = 0x8864
CURRENT_QUERY = 0x8865
QUERY_RESULT = 0x8866
QUERY_RESULT_AVAILABLE = 0x8867
ARRAY_BUFFER = 0x8892
ELEMENT_ARRAY_BUFFER = 0x8893
ARRAY_BUFFER_BINDING = 0x8894
ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
READ_ONLY = 0x88B8
WRITE_ONLY = 0x88B9
READ_WRITE = 0x88BA
BUFFER_ACCESS = 0x88BB
BUFFER_MAPPED = 0x88BC
BUFFER_MAP_POINTER = 0x88BD
STREAM_DRAW = 0x88E0
STREAM_READ = 0x88E1
STREAM_COPY = 0x88E2
STATIC_DRAW = 0x88E4
STATIC_READ = 0x88E5
STATIC_COPY = 0x88E6
DYNAMIC_DRAW = 0x88E8
DYNAMIC_READ = 0x88E9
DYNAMIC_COPY = 0x88EA
SAMPLES_PASSED = 0x8914
SRC1_ALPHA = 0x8589
VERTEX_ARRAY_BUFFER_BINDING = 0x8896
NORMAL_ARRAY_BUFFER_BINDING = 0x8897
COLOR_ARRAY_BUFFER_BINDING = 0x8898
INDEX_ARRAY_BUFFER_BINDING = 0x8899
TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A
EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B
SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C
FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D
WEIGHT_ARRAY_BUFFER_BINDING = 0x889E
FOG_COORD_SRC = 0x8450
FOG_COORD = 0x8451
CURRENT_FOG_COORD = 0x8453
FOG_COORD_ARRAY_TYPE = 0x8454
FOG_COORD_ARRAY_STRIDE = 0x8455
FOG_COORD_ARRAY_POINTER = 0x8456
FOG_COORD_ARRAY = 0x8457
FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D
SRC0_RGB = 0x8580
SRC1_RGB = 0x8581
SRC2_RGB = 0x8582
SRC0_ALPHA = 0x8588
SRC2_ALPHA = 0x858A