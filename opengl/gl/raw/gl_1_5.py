#BEWARE: automatically generated code
#This code was generated by /generate/__main__.py

from opengl.gl.raw.bindings import *

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_queries(n, ids):
    '''
    generate query object names
    
    Args:
        n: Specifies the number of query object names to be generated
        ids: Specifies an array in which the generated query object names are stored
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_queries(n, ids):
    '''
    delete named query objects
    
    Args:
        n: Specifies the number of query objects to be deleted
        ids: Specifies an array of query objects to be deleted
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_query(id):
    '''
    determine if a name corresponds to a query object
    
    Args:
        id: Specifies a value that may be the name of a query object
    '''

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def begin_query(target, id):
    '''
    delimit the boundaries of a query object
    
    Args:
        target: Specifies the target type of query object established between gl.begin_query and the subsequent gl.end_query
        id: Specifies the name of a query object
    '''

@accepts(t.enum)
@returns(t.void)
@binds(dll)
def end_query(target):
    pass

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_queryiv(target, pname, params):
    '''
    return parameters of a query object target
    
    Args:
        target: Specifies a query object target
        pname: Specifies the symbolic name of a query object target parameter
        params: Returns the requested data
    '''

@accepts(t.uint, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_query_objectiv(id, pname, params):
    pass

@accepts(t.uint, t.enum, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def get_query_objectuiv(id, pname, params):
    pass

@accepts(t.enum, t.uint)
@returns(t.void)
@binds(dll)
def bind_buffer(target, buffer):
    '''
    bind a named buffer object
    
    Args:
        target: Specifies the target to which the buffer object is bound, which must be one of the buffer binding targets in the following table:
        buffer: Specifies the name of a buffer object
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def delete_buffers(n, buffers):
    '''
    delete named buffer objects
    
    Args:
        n: Specifies the number of buffer objects to be deleted
        buffers: Specifies an array of buffer objects to be deleted
    '''

@accepts(t.sizei, POINTER(t.uint))
@returns(t.void)
@binds(dll)
def gen_buffers(n, buffers):
    '''
    generate buffer object names
    
    Args:
        n: Specifies the number of buffer object names to be generated
        buffers: Specifies an array in which the generated buffer object names are stored
    '''

@accepts(t.uint)
@returns(t.boolean)
@binds(dll)
def is_buffer(buffer):
    '''
    determine if a name corresponds to a buffer object
    
    Args:
        buffer: Specifies a value that may be the name of a buffer object
    '''

@accepts(t.enum, t.sizeiptr, t.void, t.enum)
@returns(t.void)
@binds(dll)
def buffer_data(target, size, data, usage):
    '''
    creates and initializes a buffer object's data store
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.buffer_data, which must be one of the buffer binding targets in the following table:
        size: Specifies the size in bytes of the buffer object's new data store
        data: Specifies a pointer to data that will be copied into the data store for initialization, or None if no data is to be copied
        usage: Specifies the expected usage pattern of the data store
    '''

@accepts(t.enum, t.intptr, t.sizeiptr, t.void)
@returns(t.void)
@binds(dll)
def buffer_sub_data(target, offset, size, data):
    '''
    updates a subset of a buffer object's data store
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.buffer_sub_data, which must be one of the buffer binding targets in the following table:
        offset: Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes
        size: Specifies the size in bytes of the data store region being replaced
        data: Specifies a pointer to the new data that will be copied into the data store
    '''

@accepts(t.enum, t.intptr, t.sizeiptr, t.void)
@returns(t.void)
@binds(dll)
def get_buffer_sub_data(target, offset, size, data):
    '''
    returns a subset of a buffer object's data store
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.get_buffer_sub_data, which must be one of the buffer binding targets in the following table:
        offset: Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes
        size: Specifies the size in bytes of the data store region being returned
        data: Specifies a pointer to the location where buffer object data is returned
    '''

@accepts(t.enum, t.enum)
@returns(t.void)
@binds(dll)
def map_buffer(target, access):
    '''
    map all of a buffer object's data store into the client's address space
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.map_buffer, which must be one of the buffer binding targets in the following table:
        access: Specifies the access policy for gl.map_buffer and gl.map_named_buffer, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store
    '''

@accepts(t.enum)
@returns(t.boolean)
@binds(dll)
def unmap_buffer(target):
    '''
    release the mapping of a buffer object's data store into the client's address space
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.unmap_buffer, which must be one of the buffer binding targets in the following table:
    '''

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_buffer_parameteriv(target, pname, params):
    '''
    return parameters of a buffer object
    
    Args:
        target: Specifies the target buffer object
    '''

@accepts(t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def get_buffer_pointerv(target, pname, params):
    '''
    return the pointer to a mapped buffer object's data store
    
    Args:
        target: Specifies the target to which the buffer object is bound for gl.get_buffer_pointerv, which must be one of the buffer binding targets in the following table:
        pname: Specifies the name of the pointer to be returned
        params: Returns the pointer value specified by pname
    '''

BUFFER_SIZE = 0x8764
BUFFER_USAGE = 0x8765
QUERY_COUNTER_BITS = 0x8864
CURRENT_QUERY = 0x8865
QUERY_RESULT = 0x8866
QUERY_RESULT_AVAILABLE = 0x8867
ARRAY_BUFFER = 0x8892
ELEMENT_ARRAY_BUFFER = 0x8893
ARRAY_BUFFER_BINDING = 0x8894
ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
READ_ONLY = 0x88B8
WRITE_ONLY = 0x88B9
READ_WRITE = 0x88BA
BUFFER_ACCESS = 0x88BB
BUFFER_MAPPED = 0x88BC
BUFFER_MAP_POINTER = 0x88BD
STREAM_DRAW = 0x88E0
STREAM_READ = 0x88E1
STREAM_COPY = 0x88E2
STATIC_DRAW = 0x88E4
STATIC_READ = 0x88E5
STATIC_COPY = 0x88E6
DYNAMIC_DRAW = 0x88E8
DYNAMIC_READ = 0x88E9
DYNAMIC_COPY = 0x88EA
SAMPLES_PASSED = 0x8914
SRC1_ALPHA = 0x8589
VERTEX_ARRAY_BUFFER_BINDING = 0x8896
NORMAL_ARRAY_BUFFER_BINDING = 0x8897
COLOR_ARRAY_BUFFER_BINDING = 0x8898
INDEX_ARRAY_BUFFER_BINDING = 0x8899
TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A
EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B
SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C
FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D
WEIGHT_ARRAY_BUFFER_BINDING = 0x889E
FOG_COORD_SRC = 0x8450
FOG_COORD = 0x8451
CURRENT_FOG_COORD = 0x8453
FOG_COORD_ARRAY_TYPE = 0x8454
FOG_COORD_ARRAY_STRIDE = 0x8455
FOG_COORD_ARRAY_POINTER = 0x8456
FOG_COORD_ARRAY = 0x8457
FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D
SRC0_RGB = 0x8580
SRC1_RGB = 0x8581
SRC2_RGB = 0x8582
SRC0_ALPHA = 0x8588
SRC2_ALPHA = 0x858A