#BEWARE: automatically generated code
#This code was generated by /generate/__main__.py

from opengl.gl.raw.bindings import *

NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9
VERTEX_ATTRIB_ARRAY_LONG = 0x874E
COMPRESSED_RGB8_ETC2 = 0x9274
COMPRESSED_SRGB8_ETC2 = 0x9275
COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276
COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277
COMPRESSED_RGBA8_ETC2_EAC = 0x9278
COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279
COMPRESSED_R11_EAC = 0x9270
COMPRESSED_SIGNED_R11_EAC = 0x9271
COMPRESSED_RG11_EAC = 0x9272
COMPRESSED_SIGNED_RG11_EAC = 0x9273
PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69
ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A
MAX_ELEMENT_INDEX = 0x8D6B
COMPUTE_SHADER = 0x91B9
MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB
MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC
MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD
MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262
MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263
MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264
MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265
MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266
MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB
MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE
MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF
COMPUTE_WORK_GROUP_SIZE = 0x8267
UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED
DISPATCH_INDIRECT_BUFFER = 0x90EE
DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF
COMPUTE_SHADER_BIT = 0x00000020
DEBUG_OUTPUT_SYNCHRONOUS = 0x8242
DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243
DEBUG_CALLBACK_FUNCTION = 0x8244
DEBUG_CALLBACK_USER_PARAM = 0x8245
DEBUG_SOURCE_API = 0x8246
DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247
DEBUG_SOURCE_SHADER_COMPILER = 0x8248
DEBUG_SOURCE_THIRD_PARTY = 0x8249
DEBUG_SOURCE_APPLICATION = 0x824A
DEBUG_SOURCE_OTHER = 0x824B
DEBUG_TYPE_ERROR = 0x824C
DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D
DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E
DEBUG_TYPE_PORTABILITY = 0x824F
DEBUG_TYPE_PERFORMANCE = 0x8250
DEBUG_TYPE_OTHER = 0x8251
MAX_DEBUG_MESSAGE_LENGTH = 0x9143
MAX_DEBUG_LOGGED_MESSAGES = 0x9144
DEBUG_LOGGED_MESSAGES = 0x9145
DEBUG_SEVERITY_HIGH = 0x9146
DEBUG_SEVERITY_MEDIUM = 0x9147
DEBUG_SEVERITY_LOW = 0x9148
DEBUG_TYPE_MARKER = 0x8268
DEBUG_TYPE_PUSH_GROUP = 0x8269
DEBUG_TYPE_POP_GROUP = 0x826A
DEBUG_SEVERITY_NOTIFICATION = 0x826B
MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C
DEBUG_GROUP_STACK_DEPTH = 0x826D
BUFFER = 0x82E0
SHADER = 0x82E1
PROGRAM = 0x82E2
VERTEX_ARRAY = 0x8074
QUERY = 0x82E3
PROGRAM_PIPELINE = 0x82E4
SAMPLER = 0x82E6
MAX_LABEL_LENGTH = 0x82E8
DEBUG_OUTPUT = 0x92E0
CONTEXT_FLAG_DEBUG_BIT = 0x00000002
MAX_UNIFORM_LOCATIONS = 0x826E
FRAMEBUFFER_DEFAULT_WIDTH = 0x9310
FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311
FRAMEBUFFER_DEFAULT_LAYERS = 0x9312
FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313
FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314
MAX_FRAMEBUFFER_WIDTH = 0x9315
MAX_FRAMEBUFFER_HEIGHT = 0x9316
MAX_FRAMEBUFFER_LAYERS = 0x9317
MAX_FRAMEBUFFER_SAMPLES = 0x9318
INTERNALFORMAT_SUPPORTED = 0x826F
INTERNALFORMAT_PREFERRED = 0x8270
INTERNALFORMAT_RED_SIZE = 0x8271
INTERNALFORMAT_GREEN_SIZE = 0x8272
INTERNALFORMAT_BLUE_SIZE = 0x8273
INTERNALFORMAT_ALPHA_SIZE = 0x8274
INTERNALFORMAT_DEPTH_SIZE = 0x8275
INTERNALFORMAT_STENCIL_SIZE = 0x8276
INTERNALFORMAT_SHARED_SIZE = 0x8277
INTERNALFORMAT_RED_TYPE = 0x8278
INTERNALFORMAT_GREEN_TYPE = 0x8279
INTERNALFORMAT_BLUE_TYPE = 0x827A
INTERNALFORMAT_ALPHA_TYPE = 0x827B
INTERNALFORMAT_DEPTH_TYPE = 0x827C
INTERNALFORMAT_STENCIL_TYPE = 0x827D
MAX_WIDTH = 0x827E
MAX_HEIGHT = 0x827F
MAX_DEPTH = 0x8280
MAX_LAYERS = 0x8281
MAX_COMBINED_DIMENSIONS = 0x8282
COLOR_COMPONENTS = 0x8283
DEPTH_COMPONENTS = 0x8284
STENCIL_COMPONENTS = 0x8285
COLOR_RENDERABLE = 0x8286
DEPTH_RENDERABLE = 0x8287
STENCIL_RENDERABLE = 0x8288
FRAMEBUFFER_RENDERABLE = 0x8289
FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A
FRAMEBUFFER_BLEND = 0x828B
READ_PIXELS = 0x828C
READ_PIXELS_FORMAT = 0x828D
READ_PIXELS_TYPE = 0x828E
TEXTURE_IMAGE_FORMAT = 0x828F
TEXTURE_IMAGE_TYPE = 0x8290
GET_TEXTURE_IMAGE_FORMAT = 0x8291
GET_TEXTURE_IMAGE_TYPE = 0x8292
MIPMAP = 0x8293
MANUAL_GENERATE_MIPMAP = 0x8294
AUTO_GENERATE_MIPMAP = 0x8295
COLOR_ENCODING = 0x8296
SRGB_READ = 0x8297
SRGB_WRITE = 0x8298
FILTER = 0x829A
VERTEX_TEXTURE = 0x829B
TESS_CONTROL_TEXTURE = 0x829C
TESS_EVALUATION_TEXTURE = 0x829D
GEOMETRY_TEXTURE = 0x829E
FRAGMENT_TEXTURE = 0x829F
COMPUTE_TEXTURE = 0x82A0
TEXTURE_SHADOW = 0x82A1
TEXTURE_GATHER = 0x82A2
TEXTURE_GATHER_SHADOW = 0x82A3
SHADER_IMAGE_LOAD = 0x82A4
SHADER_IMAGE_STORE = 0x82A5
SHADER_IMAGE_ATOMIC = 0x82A6
IMAGE_TEXEL_SIZE = 0x82A7
IMAGE_COMPATIBILITY_CLASS = 0x82A8
IMAGE_PIXEL_FORMAT = 0x82A9
IMAGE_PIXEL_TYPE = 0x82AA
SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC
SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD
SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE
SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF
TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1
TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2
TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3
CLEAR_BUFFER = 0x82B4
TEXTURE_VIEW = 0x82B5
VIEW_COMPATIBILITY_CLASS = 0x82B6
FULL_SUPPORT = 0x82B7
CAVEAT_SUPPORT = 0x82B8
IMAGE_CLASS_4_X_32 = 0x82B9
IMAGE_CLASS_2_X_32 = 0x82BA
IMAGE_CLASS_1_X_32 = 0x82BB
IMAGE_CLASS_4_X_16 = 0x82BC
IMAGE_CLASS_2_X_16 = 0x82BD
IMAGE_CLASS_1_X_16 = 0x82BE
IMAGE_CLASS_4_X_8 = 0x82BF
IMAGE_CLASS_2_X_8 = 0x82C0
IMAGE_CLASS_1_X_8 = 0x82C1
IMAGE_CLASS_11_11_10 = 0x82C2
IMAGE_CLASS_10_10_10_2 = 0x82C3
VIEW_CLASS_128_BITS = 0x82C4
VIEW_CLASS_96_BITS = 0x82C5
VIEW_CLASS_64_BITS = 0x82C6
VIEW_CLASS_48_BITS = 0x82C7
VIEW_CLASS_32_BITS = 0x82C8
VIEW_CLASS_24_BITS = 0x82C9
VIEW_CLASS_16_BITS = 0x82CA
VIEW_CLASS_8_BITS = 0x82CB
VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC
VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD
VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE
VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF
VIEW_CLASS_RGTC1_RED = 0x82D0
VIEW_CLASS_RGTC2_RG = 0x82D1
VIEW_CLASS_BPTC_UNORM = 0x82D2
VIEW_CLASS_BPTC_FLOAT = 0x82D3
UNIFORM = 0x92E1
UNIFORM_BLOCK = 0x92E2
PROGRAM_INPUT = 0x92E3
PROGRAM_OUTPUT = 0x92E4
BUFFER_VARIABLE = 0x92E5
SHADER_STORAGE_BLOCK = 0x92E6
VERTEX_SUBROUTINE = 0x92E8
TESS_CONTROL_SUBROUTINE = 0x92E9
TESS_EVALUATION_SUBROUTINE = 0x92EA
GEOMETRY_SUBROUTINE = 0x92EB
FRAGMENT_SUBROUTINE = 0x92EC
COMPUTE_SUBROUTINE = 0x92ED
VERTEX_SUBROUTINE_UNIFORM = 0x92EE
TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF
TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0
GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1
FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2
COMPUTE_SUBROUTINE_UNIFORM = 0x92F3
TRANSFORM_FEEDBACK_VARYING = 0x92F4
ACTIVE_RESOURCES = 0x92F5
MAX_NAME_LENGTH = 0x92F6
MAX_NUM_ACTIVE_VARIABLES = 0x92F7
MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8
NAME_LENGTH = 0x92F9
TYPE = 0x92FA
ARRAY_SIZE = 0x92FB
OFFSET = 0x92FC
BLOCK_INDEX = 0x92FD
ARRAY_STRIDE = 0x92FE
MATRIX_STRIDE = 0x92FF
IS_ROW_MAJOR = 0x9300
ATOMIC_COUNTER_BUFFER_INDEX = 0x9301
BUFFER_BINDING = 0x9302
BUFFER_DATA_SIZE = 0x9303
NUM_ACTIVE_VARIABLES = 0x9304
ACTIVE_VARIABLES = 0x9305
REFERENCED_BY_VERTEX_SHADER = 0x9306
REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307
REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308
REFERENCED_BY_GEOMETRY_SHADER = 0x9309
REFERENCED_BY_FRAGMENT_SHADER = 0x930A
REFERENCED_BY_COMPUTE_SHADER = 0x930B
TOP_LEVEL_ARRAY_SIZE = 0x930C
TOP_LEVEL_ARRAY_STRIDE = 0x930D
LOCATION = 0x930E
LOCATION_INDEX = 0x930F
IS_PER_PATCH = 0x92E7
SHADER_STORAGE_BUFFER = 0x90D2
SHADER_STORAGE_BUFFER_BINDING = 0x90D3
SHADER_STORAGE_BUFFER_START = 0x90D4
SHADER_STORAGE_BUFFER_SIZE = 0x90D5
MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6
MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7
MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8
MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9
MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA
MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB
MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC
MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD
MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE
SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF
SHADER_STORAGE_BARRIER_BIT = 0x00002000
MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39
DEPTH_STENCIL_TEXTURE_MODE = 0x90EA
TEXTURE_BUFFER_OFFSET = 0x919D
TEXTURE_BUFFER_SIZE = 0x919E
TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F
TEXTURE_VIEW_MIN_LEVEL = 0x82DB
TEXTURE_VIEW_NUM_LEVELS = 0x82DC
TEXTURE_VIEW_MIN_LAYER = 0x82DD
TEXTURE_VIEW_NUM_LAYERS = 0x82DE
TEXTURE_IMMUTABLE_LEVELS = 0x82DF
VERTEX_ATTRIB_BINDING = 0x82D4
VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5
VERTEX_BINDING_DIVISOR = 0x82D6
VERTEX_BINDING_OFFSET = 0x82D7
VERTEX_BINDING_STRIDE = 0x82D8
MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9
MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA
VERTEX_BINDING_BUFFER = 0x8F4F
@accepts(t.enum, t.enum, t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def clear_buffer_data(target, internalformat, format, type, data):
    '''
    fill a buffer object's data store with a fixed value.
    
    gl.clear_buffer_data and gl.clear_named_buffer_data fill the entirety of a
    buffer object's data store with data from client memory.
    
    Args:
        target: the target to which the buffer object is bound for
            glclearbufferdata, which must must be one of the buffer binding
            targets in the following table:.
        internalformat: the internal format with which the data will be stored
            in the buffer object.
        format: the format of the data in memory addressed by data.
        type: the type of the data in memory addressed by data.
        data: the address of a memory location storing the data to be replicated
            into the buffer's data store.
    '''

@accepts(t.enum, t.enum, t.intptr, t.sizeiptr, t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def clear_buffer_sub_data(target, internalformat, offset, size, format, type, data):
    '''
    fill all or part of buffer object's data store with a fixed value.
    
    gl.clear_buffer_sub_data and gl.clear_named_buffer_sub_data fill a specified
    region of a buffer object's data store with data from client memory.
    
    Args:
        target: the target to which the buffer object is bound for
            glclearbuffersubdata, which must be one of the buffer binding
            targets in the following table:.
        internalformat: the internal format with which the data will be stored
            in the buffer object.
        offset: the offset in basic machine units into the buffer object's data
            store at which to start filling.
        size: the size in basic machine units of the range of the data store to
            fill.
        format: the format of the data in memory addressed by data.
        type: the type of the data in memory addressed by data.
        data: the address of a memory location storing the data to be replicated
            into the buffer's data store.
    '''

@accepts(t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def dispatch_compute(num_groups_x, num_groups_y, num_groups_z):
    '''
    launch one or more compute work groups.
    
    gl.dispatch_compute launches one or more compute work groups. Each work
    group is processed by the active program object for the compute shader
    stage. While the individual shader invocations within a work group are
    executed as a unit, work groups are executed completely independently and in
    unspecified order. num_groups_x, num_groups_y and num_groups_z specify the
    number of local work groups that will be dispatched in the X, Y and Z
    dimensions, respectively.
    
    Args:
        num_groups_x: the number of work groups to be launched in the x
            dimension.
        num_groups_y: the number of work groups to be launched in the y
            dimension.
        num_groups_z: the number of work groups to be launched in the z
            dimension.
    '''

@accepts(t.intptr)
@returns(t.void)
@binds(dll)
def dispatch_compute_indirect(indirect):
    '''
    launch one or more compute work groups using parameters stored in a buffer.
    
    gl.dispatch_compute_indirect launches one or more compute work groups using
    parameters stored in the buffer object currently bound to the
    gl.DISPATCH_INDIRECT_BUFFER target. Each work group is processed by the
    active program object for the compute shader stage. While the individual
    shader invocations within a work group are executed as a unit, work groups
    are executed completely independently and in unspecified order. indirect
    contains the offset into the data store of the buffer object bound to the
    gl.DISPATCH_INDIRECT_BUFFER target at which the parameters are stored.
    
    Args:
        indirect: the offset into the buffer object currently bound to the
            gl_dispatch_indirect_buffer buffer target at which the dispatch
            parameters are stored.
    '''

@accepts(t.uint, t.enum, t.int, t.int, t.int, t.int, t.uint, t.enum, t.int, t.int, t.int, t.int, t.sizei, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def copy_image_sub_data(srcname, srctarget, srclevel, srcx, srcy, srcz, dstname, dsttarget, dstlevel, dstx, dsty, dstz, srcwidth, srcheight, srcdepth):
    '''
    perform a raw data copy between two images.
    
    gl.copy_image_sub_data may be used to copy data from one image to another.
    gl.copy_image_sub_data does not perform general-purpose conversions such as
    scaling, resizing, blending, color-space, or format conversions.
    
    Args:
        srcname: the name of a texture or renderbuffer object from which to
            copy.
        srctarget: the target representing the namespace of the source name
            srcname.
        srclevel: the mipmap level to read from the source.
        srcx: the x coordinate of the left edge of the souce region to copy.
        srcy: the y coordinate of the top edge of the souce region to copy.
        srcz: the z coordinate of the near edge of the souce region to copy.
        dstname: the name of a texture or renderbuffer object to which to copy.
        dsttarget: the target representing the namespace of the destination name
            dstname.
        dstx: the x coordinate of the left edge of the destination region.
        dsty: the y coordinate of the top edge of the destination region.
        dstz: the z coordinate of the near edge of the destination region.
        srcwidth: the width of the region to be copied.
        srcheight: the height of the region to be copied.
        srcdepth: the depth of the region to be copied.
    '''

@accepts(t.enum, t.enum, t.int)
@returns(t.void)
@binds(dll)
def framebuffer_parameteri(target, pname, param):
    '''
    set a named parameter of a framebuffer object.
    
    gl.framebuffer_parameteri and gl.named_framebuffer_parameteri modify the
    value of the parameter named pname in the specified framebuffer object.
    There are no modifiable parameters of the default draw and read framebuffer,
    so they are not valid targets of these commands.
    
    Args:
        target: the target to which the framebuffer is bound for
            glframebufferparameteri.
        pname: the framebuffer parameter to be modified.
        param: the new value for the parameter named pname.
    '''

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_framebuffer_parameteriv(target, pname, params):
    pass

@accepts(t.enum, t.enum, t.enum, t.sizei, POINTER(t.int64))
@returns(t.void)
@binds(dll)
def get_internalformati64v(target, internalformat, pname, bufsize, params):
    pass

@accepts(t.uint, t.int, t.int, t.int, t.int, t.sizei, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def invalidate_tex_sub_image(texture, level, xoffset, yoffset, zoffset, width, height, depth):
    '''
    invalidate a region of a texture image.
    
    gl.invalidate_tex_sub_image invalidates all or part of a texture image.
    texture and level indicated which texture image is being invalidated. After
    this command, data in that subregion have undefined values. xoffset,
    yoffset, zoffset, width, height, and depth are interpreted as they are in
    gl.tex_sub_image3D.
    
    Args:
        texture: the name of a texture object a subregion of which to
            invalidate.
        level: the level of detail of the texture object within which the region
            resides.
        xoffset: the x offset of the region to be invalidated.
        yoffset: the y offset of the region to be invalidated.
        zoffset: the z offset of the region to be invalidated.
        width: the width of the region to be invalidated.
        height: the height of the region to be invalidated.
        depth: the depth of the region to be invalidated.
    '''

@accepts(t.uint, t.int)
@returns(t.void)
@binds(dll)
def invalidate_tex_image(texture, level):
    '''
    invalidate the entirety a texture image.
    
    Args:
        texture: the name of a texture object to invalidate.
        level: the level of detail of the texture object to invalidate.
    '''

@accepts(t.uint, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def invalidate_buffer_sub_data(buffer, offset, length):
    '''
    invalidate a region of a buffer object's data store.
    
    gl.invalidate_buffer_sub_data invalidates all or part of the content of the
    data store of a buffer object. After invalidation, the content of the
    specified range of the buffer's data store becomes undefined. The start of
    the range is given by offset and its size is given by length, both measured
    in basic machine units.
    
    Args:
        buffer: the name of a buffer object, a subrange of whose data store to
            invalidate.
        offset: the offset within the buffer's data store of the start of the
            range to be invalidated.
        length: the length of the range within the buffer's data store to be
            invalidated.
    '''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def invalidate_buffer_data(buffer):
    '''
    invalidate the content of a buffer object's data store.
    
    gl.invalidate_buffer_data invalidates all of the content of the data store
    of a buffer object. After invalidation, the content of the buffer's data
    store becomes undefined.
    
    Args:
        buffer: the name of a buffer object whose data store to invalidate.
    '''

@accepts(t.enum, t.sizei, POINTER(t.enum))
@returns(t.void)
@binds(dll)
def invalidate_framebuffer(target, numattachments, attachments):
    '''
    invalidate the content of some or all of a framebuffer's attachments.
    
    gl.invalidate_framebuffer and gl.invalidate_named_framebuffer_data
    invalidate the entire contents of a specified set of attachments of a
    framebuffer.
    
    Args:
        target: the target to which the framebuffer object is attached for
            glinvalidateframebuffer.
        numattachments: the number of entries in the attachments array.
        attachments: a pointer to an array identifying the attachments to be
            invalidated.
    '''

@accepts(t.enum, t.sizei, POINTER(t.enum), t.int, t.int, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def invalidate_sub_framebuffer(target, numattachments, attachments, x, y, width, height):
    '''
    invalidate the content of a region of some or all of a framebuffer's attachments.
    
    gl.invalidate_sub_framebuffer and gl.invalidate_named_framebuffer_sub_data
    invalidate the contents of a specified region of a specified set of
    attachments of a framebuffer.
    
    Args:
        target: the target to which the framebuffer object is attached for
            glinvalidatesubframebuffer.
        numattachments: the number of entries in the attachments array.
        attachments: a pointer to an array identifying the attachments to be
            invalidated.
        x: the x offset of the region to be invalidated.
        y: the y offset of the region to be invalidated.
        width: the width of the region to be invalidated.
        height: the height of the region to be invalidated.
    '''

@accepts(t.enum, t.void, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def multi_draw_arrays_indirect(mode, indirect, drawcount, stride):
    '''
    render multiple sets of primitives from array data, taking parameters from
memory.
    
    gl.multi_draw_arrays_indirect specifies multiple geometric primitives with
    very few subroutine calls. gl.multi_draw_arrays_indirect behaves similarly
    to a multitude of calls to gl.draw_arrays_instanced_base_instance, execept
    that the parameters to each call to gl.draw_arrays_instanced_base_instance
    are stored in an array in memory at the address given by indirect, separated
    by the stride, in basic machine units, specified by stride. If stride is
    zero, then the array is assumed to be tightly packed in memory.
    
    Args:
        mode: what kind of primitives to render.
        indirect: the address of an array of structures containing the draw
            parameters.
        drawcount: the the number of elements in the array of draw parameter
            structures.
        stride: the distance in basic machine units between elements of the draw
            parameter array.
    '''

@accepts(t.enum, t.enum, t.void, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def multi_draw_elements_indirect(mode, type, indirect, drawcount, stride):
    '''
    render indexed primitives from array data, taking parameters from memory.
    
    gl.multi_draw_elements_indirect specifies multiple indexed geometric
    primitives with very few subroutine calls. gl.multi_draw_elements_indirect
    behaves similarly to a multitude of calls to
    gl.draw_elements_instanced_base_vertex_base_instance, execpt that the
    parameters to gl.draw_elements_instanced_base_vertex_base_instance are
    stored in an array in memory at the address given by indirect, separated by
    the stride, in basic machine units, specified by stride. If stride is zero,
    then the array is assumed to be tightly packed in memory.
    
    Args:
        mode: what kind of primitives to render.
        type: the type of data in the buffer bound to the
            gl_element_array_buffer binding.
        indirect: the address of a structure containing an array of draw
            parameters.
        drawcount: the number of elements in the array addressed by indirect.
        stride: the distance in basic machine units between elements of the draw
            parameter array.
    '''

@accepts(t.uint, t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_program_interfaceiv(program, programinterface, pname, params):
    pass

@accepts(t.uint, t.enum, t.char_p)
@returns(t.uint)
@binds(dll)
def get_program_resource_index(program, programinterface, name):
    '''
    query the index of a named resource within a program.
    
    gl.get_program_resource_index returns the unsigned integer index assigned to
    a resource named name in the interface type programInterface of program
    object program.
    
    Args:
        program: the name of a program object whose resources to query.
        programinterface: a token identifying the interface within program
            containing the resource named name.
        name: the name of the resource to query the index of.
    '''

@accepts(t.uint, t.enum, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_program_resource_name(program, programinterface, index, bufsize, length, name):
    '''
    query the name of an indexed resource within a program.
    
    gl.get_program_resource_name retrieves the name string assigned to the
    single active resource with an index of index in the interface
    programInterface of program object program. index must be less than the
    number of entries in the active resource list for programInterface.
    
    Args:
        program: the name of a program object whose resources to query.
        programinterface: a token identifying the interface within program
            containing the indexed resource.
        index: the index of the resource within programinterface of program.
        bufsize: the size of the character array whose address is given by name.
        length: the address of a variable which will receive the length of the
            resource name.
        name: the address of a character array into which will be written the
            name of the resource.
    '''

@accepts(t.uint, t.enum, t.uint, t.sizei, POINTER(t.enum), t.sizei, POINTER(t.sizei), POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_program_resourceiv(program, programinterface, index, propcount, props, bufsize, length, params):
    pass

@accepts(t.uint, t.enum, t.char_p)
@returns(t.int)
@binds(dll)
def get_program_resource_location(program, programinterface, name):
    '''
    query the location of a named resource within a program.
    
    gl.get_program_resource_location returns the location assigned to the
    variable named name in interface programInterface of program object program.
    program must be the name of a program that has been linked successfully.
    programInterface must be one of gl.UNIFORM, gl.PROGRAM_INPUT,
    gl.PROGRAM_OUTPUT, gl.VERTEX_SUBROUTINE_UNIFORM,
    gl.TESS_CONTROL_SUBROUTINE_UNIFORM, gl.TESS_EVALUATION_SUBROUTINE_UNIFORM,
    gl.GEOMETRY_SUBROUTINE_UNIFORM, gl.FRAGMENT_SUBROUTINE_UNIFORM,
    gl.COMPUTE_SUBROUTINE_UNIFORM, or gl.TRANSFORM_FEEDBACK_BUFFER.
    
    Args:
        program: the name of a program object whose resources to query.
        programinterface: a token identifying the interface within program
            containing the resource named name.
        name: the name of the resource to query the location of.
    '''

@accepts(t.uint, t.enum, t.char_p)
@returns(t.int)
@binds(dll)
def get_program_resource_location_index(program, programinterface, name):
    '''
    query the fragment color index of a named variable within a program.
    
    gl.get_program_resource_location_index returns the fragment color index
    assigned to the variable named name in interface programInterface of program
    object program. program must be the name of a program that has been linked
    successfully. programInterface must be gl.PROGRAM_OUTPUT.
    
    Args:
        program: the name of a program object whose resources to query.
        programinterface: a token identifying the interface within program
            containing the resource named name.
        name: the name of the resource to query the location of.
    '''

@accepts(t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def shader_storage_block_binding(program, storageblockindex, storageblockbinding):
    '''
    change an active shader storage block binding.
    
    gl.shader_storage_block_binding, changes the active shader storage block
    with an assigned index of storageBlockIndex in program object program.
    storageBlockIndex must be an active shader storage block index in program.
    storageBlockBinding must be less than the value of
    gl.MAX_SHADER_STORAGE_BUFFER_BINDINGS. If successful,
    gl.shader_storage_binding specifies that program will use the data store of
    the buffer object bound to the binding point storageBlockBinding to read and
    write the values of the buffer variables in the shader storage block
    identified by storageBlockIndex.
    
    Args:
        program: the name of the program containing the block whose binding to
            change.
        storageblockindex: the index storage block within the program.
        storageblockbinding: the index storage block binding to associate with
            the specified storage block.
    '''

@accepts(t.enum, t.enum, t.uint, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def tex_buffer_range(target, internalformat, buffer, offset, size):
    '''
    attach a range of a buffer object's data store to a buffer texture object.
    
    gl.tex_buffer_range and gl.texture_buffer_range attach a range of the data
    store of a specified buffer object to a specified texture object, and
    specify the storage format for the texture image found found in the buffer
    object. The texture object must be a buffer texture.
    
    Args:
        target: the target to which the texture object is bound for
            gltexbufferrange.
        internalformat: the internal format of the data in the store belonging
            to buffer.
        buffer: the name of the buffer object whose storage to attach to the
            active buffer texture.
        offset: the offset of the start of the range of the buffer's data store
            to attach.
        size: the size of the range of the buffer's data store to attach.
    '''

@accepts(t.enum, t.sizei, t.enum, t.sizei, t.sizei, t.boolean)
@returns(t.void)
@binds(dll)
def tex_storage2_d_multisample(target, samples, internalformat, width, height, fixedsamplelocations):
    '''
    specify storage for a two-dimensional multisample texture.
    
    Args:
        target: the target to which the texture object is bound for
            gltexstorage2dmultisample.
        samples: the number of samples in the texture.
        internalformat: the sized internal format to be used to store texture
            image data.
        width: the width of the texture, in texels.
        height: the height of the texture, in texels.
        fixedsamplelocations: whether the image will use identical sample
            locations and the same number of samples for all texels in the
            image, and the sample locations will not depend on the internal
            format or size of the image.
    '''

@accepts(t.enum, t.sizei, t.enum, t.sizei, t.sizei, t.sizei, t.boolean)
@returns(t.void)
@binds(dll)
def tex_storage3_d_multisample(target, samples, internalformat, width, height, depth, fixedsamplelocations):
    '''
    specify storage for a two-dimensional multisample array texture.
    
    Args:
        target: the target to which the texture object is bound for
            gltexstorage3dmultisample.
        samples: the number of samples in the texture.
        internalformat: the sized internal format to be used to store texture
            image data.
        width: the width of the texture, in texels.
        height: the height of the texture, in texels.
        depth: the depth of the texture, in layers.
        fixedsamplelocations: whether the image will use identical sample
            locations and the same number of samples for all texels in the
            image, and the sample locations will not depend on the internal
            format or size of the image.
    '''

@accepts(t.uint, t.enum, t.uint, t.enum, t.uint, t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def texture_view(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers):
    '''
    initialize a texture as a data alias of another texture's data store.
    
    gl.texture_view initializes a texture object as an alias, or view of another
    texture object, sharing some or all of the parent texture's data store with
    the initialized texture. texture specifies a name previously reserved by a
    successful call to gl.gen_textures but that has not yet been bound or given
    a target.
    
    Args:
        texture: the texture object to be initialized as a view.
        target: the target to be used for the newly initialized texture.
        origtexture: the name of a texture object of which to make a view.
        minlevel: lowest level of detail of the view.
        numlevels: the number of levels of detail to include in the view.
        minlayer: the index of the first layer to include in the view.
        numlayers: the number of layers to include in the view.
    '''

@accepts(t.uint, t.uint, t.intptr, t.sizei)
@returns(t.void)
@binds(dll)
def bind_vertex_buffer(bindingindex, buffer, offset, stride):
    '''
    bind a buffer to a vertex buffer bind point.
    
    gl.bind_vertex_buffer and gl.vertex_array_vertex_buffer bind the buffer
    named buffer to the vertex buffer binding point whose index is given by
    bindingindex. gl.bind_vertex_buffer modifies the binding of the currently
    bound vertex array object, whereas gl.vertex_array_vertex_buffer allows the
    caller to specify ID of the vertex array object with an argument named
    vaobj, for which the binding should be modified. offset and stride specify
    the offset of the first element within the buffer and the distance between
    elements within the buffer, respectively, and are both measured in basic
    machine units. bindingindex must be less than the value of
    gl.MAX_VERTEX_ATTRIB_BINDINGS.
    
    Args:
        bindingindex: the index of the vertex buffer binding point to which to
            bind the buffer.
        buffer: the name of a buffer to bind to the vertex buffer binding point.
        offset: the offset of the first element of the buffer.
        stride: the distance between elements within the buffer.
    '''

@accepts(t.uint, t.int, t.enum, t.boolean, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_format(attribindex, size, type, normalized, relativeoffset):
    '''
    specify the organization of vertex arrays.
    
    gl.vertex_attrib_format, gl.vertex_attrib_i_format and
    gl.vertex_attrib_l_format, as well as gl.vertex_array_attrib_format,
    gl.vertex_array_attrib_i_format and gl.vertex_array_attrib_l_format specify
    the organization of data in vertex arrays. The first three calls operate on
    the bound vertex array object, whereas the last three ones modify the state
    of a vertex array object with ID vaobj. attribindex specifies the index of
    the generic vertex attribute array whose data layout is being described, and
    must be less than the value of gl.MAX_VERTEX_ATTRIBS.
    
    Args:
        attribindex: the generic vertex attribute array being described.
        size: the number of values per vertex that are stored in the array.
        type: the type of the data stored in the array.
        normalized: the distance between elements within the buffer.
        relativeoffset: the distance between elements within the buffer.
    '''

@accepts(t.uint, t.int, t.enum, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_i_format(attribindex, size, type, relativeoffset):
    pass

@accepts(t.uint, t.int, t.enum, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_l_format(attribindex, size, type, relativeoffset):
    pass

@accepts(t.uint, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_binding(attribindex, bindingindex):
    '''
    associate a vertex attribute and a vertex buffer binding for a vertex array
object.
    
    gl.vertex_attrib_binding and gl.vertex_array_attrib_binding establishes an
    association between the generic vertex attribute of a vertex array object
    whose index is given by attribindex, and a vertex buffer binding whose index
    is given by bindingindex. For gl.vertex_attrib_binding, the vertex array
    object affected is that currently bound. For gl.vertex_array_attrib_binding,
    vaobj is the name of the vertex array object.
    
    Args:
        attribindex: the index of the attribute to associate with a vertex
            buffer binding.
        bindingindex: the index of the vertex buffer binding with which to
            associate the generic vertex attribute.
    '''

@accepts(t.uint, t.uint)
@returns(t.void)
@binds(dll)
def vertex_binding_divisor(bindingindex, divisor):
    '''
    modify the rate at which generic vertex attributes advance.
    
    gl.vertex_binding_divisor and gl.vertex_array_binding_divisor modify the
    rate at which generic vertex attributes advance when rendering multiple
    instances of primitives in a single draw command. If divisor is zero, the
    attributes using the buffer bound to bindingindex advance once per vertex.
    If divisor is non-zero, the attributes advance once per divisor instances of
    the set of vertices being rendered. An attribute is referred to as instanced
    if the corresponding divisor value is non-zero.
    
    Args:
        bindingindex: the index of the binding whose divisor to modify.
        divisor: the new value for the instance step rate to apply.
    '''

@accepts(t.enum, t.enum, t.enum, t.sizei, POINTER(t.uint), t.boolean)
@returns(t.void)
@binds(dll)
def debug_message_control(source, type, severity, count, ids, enabled):
    '''
    control the reporting of debug messages in a debug context.
    
    gl.debug_message_control controls the reporting of debug messages generated
    by a debug context. The parameters source, type and severity form a filter
    to select messages from the pool of potential messages generated by the GL.
    
    Args:
        source: the source of debug messages to enable or disable.
        type: the type of debug messages to enable or disable.
        severity: the severity of debug messages to enable or disable.
        count: the length of the array ids.
        ids: the address of an array of unsigned integers contianing the ids of
            the messages to enable or disable.
        enabled: a boolean flag determining whether the selected messages should
            be enabled or disabled.
    '''

@accepts(t.enum, t.enum, t.uint, t.enum, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def debug_message_insert(source, type, id, severity, length, buf):
    '''
    inject an application-supplied message into the debug message queue.
    
    gl.debug_message_insert inserts a user-supplied message into the debug
    output queue. source specifies the source that will be used to classify the
    message and must be gl.DEBUG_SOURCE_APPLICATION or
    gl.DEBUG_SOURCE_THIRD_PARTY. All other sources are reserved for use by the
    GL implementation. type indicates the type of the message to be inserted and
    may be one of gl.DEBUG_TYPE_ERROR, gl.DEBUG_TYPE_DEPRECATED_BEHAVIOR,
    gl.DEBUG_TYPE_UNDEFINED_BEHAVIOR, gl.DEBUG_TYPE_PORTABILITY,
    gl.DEBUG_TYPE_PERFORMANCE, gl.DEBUG_TYPE_MARKER, gl.DEBUG_TYPE_PUSH_GROUP,
    gl.DEBUG_TYPE_POP_GROUP, or gl.DEBUG_TYPE_OTHER.
    
    Args:
        source: the source of the debug message to insert.
        type: the type of the debug message insert.
        id: the user-supplied identifier of the message to insert.
        severity: the severity of the debug messages to insert.
        length: the length string contained in the character array whose address
            is given by message.
        buf: the address of a character array containing the message to insert.
    '''

@accepts(t.DEBUGPROC, t.void)
@returns(t.void)
@binds(dll)
def debug_message_callback(callback, userparam):
    '''
    specify a callback to receive debugging messages from the GL.
    
    gl.debug_message_callback sets the current debug output callback function to
    the function whose address is given in callback.
    
    Args:
        callback: the address of a callback function that will be called when a
            debug message is generated.
        userparam: a user supplied pointer that will be passed on each
            invocation of callback.
    '''

@accepts(t.uint, t.sizei, POINTER(t.enum), POINTER(t.enum), POINTER(t.uint), POINTER(t.enum), POINTER(t.sizei), t.char_p)
@returns(t.uint)
@binds(dll)
def get_debug_message_log(count, bufsize, sources, types, ids, severities, lengths, messagelog):
    '''
    retrieve messages from the debug message log.
    
    gl.get_debug_message_log retrieves messages from the debug message log. A
    maximum of count messages are retrieved from the log. If sources is not None
    then the source of each message is written into up to count elements of the
    array. If types is not None then the type of each message is written into up
    to count elements of the array.
    
    Args:
        count: the number of debug messages to retrieve from the log.
        bufsize: the size of the buffer whose address is given by messagelog.
        sources: the address of an array of variables to receive the sources of
            the retrieved messages.
        types: the address of an array of variables to receive the types of the
            retrieved messages.
        ids: the address of an array of unsigned integers to receive the ids of
            the retrieved messages.
        severities: the address of an array of variables to receive the
            severites of the retrieved messages.
        lengths: the address of an array of variables to receive the lengths of
            the received messages.
        messagelog: the address of an array of characters that will receive the
            messages.
    '''

@accepts(t.enum, t.uint, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def push_debug_group(source, id, length, message):
    '''
    push a named debug group into the command stream.
    
    gl.push_debug_group pushes a debug group described by the string message
    into the command stream. The value of id specifies the ID of messages
    generated. The parameter length contains the number of characters in
    message. If length is negative, it is implied that message contains a null
    terminated string.
    
    Args:
        source: the source of the debug message.
        id: the identifier of the message.
        length: the length of the message to be sent to the debug output stream.
        message: the a string containing the message to be sent to the debug
            output stream.
    '''

@accepts()
@returns(t.void)
@binds(dll)
def pop_debug_group():
    '''
    pop the active debug group.
    '''

@accepts(t.enum, t.uint, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def object_label(identifier, name, length, label):
    '''
    label a named object identified within a namespace.
    
    gl.object_label labels the object identified by name within the namespace
    given by identifier. identifier must be one of gl.BUFFER, gl.SHADER,
    gl.PROGRAM, gl.VERTEX_ARRAY, gl.QUERY, gl.PROGRAM_PIPELINE,
    gl.TRANSFORM_FEEDBACK, gl.SAMPLER, gl.TEXTURE, gl.RENDERBUFFER,
    gl.FRAMEBUFFER, to indicate the namespace containing the names of buffers,
    shaders, programs, vertex array objects, query objects, program pipelines,
    transform feedback objects, samplers, textures, renderbuffers and frame
    buffers, respectively.
    
    Args:
        identifier: the namespace from which the name of the object is
            allocated.
        name: the name of the object to label.
        length: the length of the label to be used for the object.
        label: the address of a string containing the label to assign to the
            object.
    '''

@accepts(t.enum, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_object_label(identifier, name, bufsize, length, label):
    '''
    retrieve the label of a named object identified within a namespace.
    
    gl.get_object_label retrieves the label of the object identified by name
    within the namespace given by identifier. identifier must be one of
    gl.BUFFER, gl.SHADER, gl.PROGRAM, gl.VERTEX_ARRAY, gl.QUERY,
    gl.PROGRAM_PIPELINE, gl.TRANSFORM_FEEDBACK, gl.SAMPLER, gl.TEXTURE,
    gl.RENDERBUFFER, gl.FRAMEBUFFER, to indicate the namespace containing the
    names of buffers, shaders, programs, vertex array objects, query objects,
    program pipelines, transform feedback objects, samplers, textures,
    renderbuffers and frame buffers, respectively.
    
    Args:
        identifier: the namespace from which the name of the object is
            allocated.
        name: the name of the object whose label to retrieve.
        length: the address of a variable to receive the length of the object
            label.
        label: the address of a string that will receive the object label.
    '''

@accepts(t.void, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def object_ptr_label(ptr, length, label):
    '''
    label a a sync object identified by a pointer.
    
    gl.object_ptr_label labels the sync object identified by ptr.
    
    Args:
        ptr: a pointer identifying a sync object.
        length: the length of the label to be used for the object.
        label: the address of a string containing the label to assign to the
            object.
    '''

@accepts(t.void, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_object_ptr_label(ptr, bufsize, length, label):
    '''
    retrieve the label of a sync object identified by a pointer.
    
    gl.get_object_ptr_label retrieves the label of the sync object identified by
    ptr.
    
    Args:
        ptr: the name of the sync object whose label to retrieve.
        length: the address of a variable to receive the length of the object
            label.
        label: the address of a string that will receive the object label.
    '''

@accepts(t.enum, t.void)
@returns(t.void)
@binds(dll)
def get_pointerv(pname, params):
    '''
    return the address of the specified pointer.
    
    gl.get_pointerv returns pointer information. pname indicates the pointer to
    be returned, and params is a pointer to a location in which to place the
    returned data.
    
    Args:
        pname: the pointer to be returned.
        params: returns the pointer value specified by pname.
    '''

DISPLAY_LIST = 0x82E7
@accepts(t.enum, t.void)
@returns(t.void)
@binds(dll)
def get_pointerv(pname, params):
    '''
    return the address of the specified pointer.
    
    gl.get_pointerv returns pointer information. pname indicates the pointer to
    be returned, and params is a pointer to a location in which to place the
    returned data.
    
    Args:
        pname: the pointer to be returned.
        params: returns the pointer value specified by pname.
    '''

STACK_UNDERFLOW = 0x0504
STACK_OVERFLOW = 0x0503