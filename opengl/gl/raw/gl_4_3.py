#BEWARE: automatically generated code
#This code was generated by opengl/gl/generate/__main__.py

from opengl.gl.raw.bindings import *

NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9
VERTEX_ATTRIB_ARRAY_LONG = 0x874E
COMPRESSED_RGB8_ETC2 = 0x9274
COMPRESSED_SRGB8_ETC2 = 0x9275
COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276
COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277
COMPRESSED_RGBA8_ETC2_EAC = 0x9278
COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279
COMPRESSED_R11_EAC = 0x9270
COMPRESSED_SIGNED_R11_EAC = 0x9271
COMPRESSED_RG11_EAC = 0x9272
COMPRESSED_SIGNED_RG11_EAC = 0x9273
PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69
ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A
MAX_ELEMENT_INDEX = 0x8D6B
COMPUTE_SHADER = 0x91B9
MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB
MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC
MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD
MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262
MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263
MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264
MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265
MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266
MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB
MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE
MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF
COMPUTE_WORK_GROUP_SIZE = 0x8267
UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED
DISPATCH_INDIRECT_BUFFER = 0x90EE
DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF
COMPUTE_SHADER_BIT = 0x00000020
DEBUG_OUTPUT_SYNCHRONOUS = 0x8242
DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243
DEBUG_CALLBACK_FUNCTION = 0x8244
DEBUG_CALLBACK_USER_PARAM = 0x8245
DEBUG_SOURCE_API = 0x8246
DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247
DEBUG_SOURCE_SHADER_COMPILER = 0x8248
DEBUG_SOURCE_THIRD_PARTY = 0x8249
DEBUG_SOURCE_APPLICATION = 0x824A
DEBUG_SOURCE_OTHER = 0x824B
DEBUG_TYPE_ERROR = 0x824C
DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D
DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E
DEBUG_TYPE_PORTABILITY = 0x824F
DEBUG_TYPE_PERFORMANCE = 0x8250
DEBUG_TYPE_OTHER = 0x8251
MAX_DEBUG_MESSAGE_LENGTH = 0x9143
MAX_DEBUG_LOGGED_MESSAGES = 0x9144
DEBUG_LOGGED_MESSAGES = 0x9145
DEBUG_SEVERITY_HIGH = 0x9146
DEBUG_SEVERITY_MEDIUM = 0x9147
DEBUG_SEVERITY_LOW = 0x9148
DEBUG_TYPE_MARKER = 0x8268
DEBUG_TYPE_PUSH_GROUP = 0x8269
DEBUG_TYPE_POP_GROUP = 0x826A
DEBUG_SEVERITY_NOTIFICATION = 0x826B
MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C
DEBUG_GROUP_STACK_DEPTH = 0x826D
BUFFER = 0x82E0
SHADER = 0x82E1
PROGRAM = 0x82E2
VERTEX_ARRAY = 0x8074
QUERY = 0x82E3
PROGRAM_PIPELINE = 0x82E4
SAMPLER = 0x82E6
MAX_LABEL_LENGTH = 0x82E8
DEBUG_OUTPUT = 0x92E0
CONTEXT_FLAG_DEBUG_BIT = 0x00000002
MAX_UNIFORM_LOCATIONS = 0x826E
FRAMEBUFFER_DEFAULT_WIDTH = 0x9310
FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311
FRAMEBUFFER_DEFAULT_LAYERS = 0x9312
FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313
FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314
MAX_FRAMEBUFFER_WIDTH = 0x9315
MAX_FRAMEBUFFER_HEIGHT = 0x9316
MAX_FRAMEBUFFER_LAYERS = 0x9317
MAX_FRAMEBUFFER_SAMPLES = 0x9318
INTERNALFORMAT_SUPPORTED = 0x826F
INTERNALFORMAT_PREFERRED = 0x8270
INTERNALFORMAT_RED_SIZE = 0x8271
INTERNALFORMAT_GREEN_SIZE = 0x8272
INTERNALFORMAT_BLUE_SIZE = 0x8273
INTERNALFORMAT_ALPHA_SIZE = 0x8274
INTERNALFORMAT_DEPTH_SIZE = 0x8275
INTERNALFORMAT_STENCIL_SIZE = 0x8276
INTERNALFORMAT_SHARED_SIZE = 0x8277
INTERNALFORMAT_RED_TYPE = 0x8278
INTERNALFORMAT_GREEN_TYPE = 0x8279
INTERNALFORMAT_BLUE_TYPE = 0x827A
INTERNALFORMAT_ALPHA_TYPE = 0x827B
INTERNALFORMAT_DEPTH_TYPE = 0x827C
INTERNALFORMAT_STENCIL_TYPE = 0x827D
MAX_WIDTH = 0x827E
MAX_HEIGHT = 0x827F
MAX_DEPTH = 0x8280
MAX_LAYERS = 0x8281
MAX_COMBINED_DIMENSIONS = 0x8282
COLOR_COMPONENTS = 0x8283
DEPTH_COMPONENTS = 0x8284
STENCIL_COMPONENTS = 0x8285
COLOR_RENDERABLE = 0x8286
DEPTH_RENDERABLE = 0x8287
STENCIL_RENDERABLE = 0x8288
FRAMEBUFFER_RENDERABLE = 0x8289
FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A
FRAMEBUFFER_BLEND = 0x828B
READ_PIXELS = 0x828C
READ_PIXELS_FORMAT = 0x828D
READ_PIXELS_TYPE = 0x828E
TEXTURE_IMAGE_FORMAT = 0x828F
TEXTURE_IMAGE_TYPE = 0x8290
GET_TEXTURE_IMAGE_FORMAT = 0x8291
GET_TEXTURE_IMAGE_TYPE = 0x8292
MIPMAP = 0x8293
MANUAL_GENERATE_MIPMAP = 0x8294
AUTO_GENERATE_MIPMAP = 0x8295
COLOR_ENCODING = 0x8296
SRGB_READ = 0x8297
SRGB_WRITE = 0x8298
FILTER = 0x829A
VERTEX_TEXTURE = 0x829B
TESS_CONTROL_TEXTURE = 0x829C
TESS_EVALUATION_TEXTURE = 0x829D
GEOMETRY_TEXTURE = 0x829E
FRAGMENT_TEXTURE = 0x829F
COMPUTE_TEXTURE = 0x82A0
TEXTURE_SHADOW = 0x82A1
TEXTURE_GATHER = 0x82A2
TEXTURE_GATHER_SHADOW = 0x82A3
SHADER_IMAGE_LOAD = 0x82A4
SHADER_IMAGE_STORE = 0x82A5
SHADER_IMAGE_ATOMIC = 0x82A6
IMAGE_TEXEL_SIZE = 0x82A7
IMAGE_COMPATIBILITY_CLASS = 0x82A8
IMAGE_PIXEL_FORMAT = 0x82A9
IMAGE_PIXEL_TYPE = 0x82AA
SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC
SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD
SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE
SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF
TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1
TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2
TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3
CLEAR_BUFFER = 0x82B4
TEXTURE_VIEW = 0x82B5
VIEW_COMPATIBILITY_CLASS = 0x82B6
FULL_SUPPORT = 0x82B7
CAVEAT_SUPPORT = 0x82B8
IMAGE_CLASS_4_X_32 = 0x82B9
IMAGE_CLASS_2_X_32 = 0x82BA
IMAGE_CLASS_1_X_32 = 0x82BB
IMAGE_CLASS_4_X_16 = 0x82BC
IMAGE_CLASS_2_X_16 = 0x82BD
IMAGE_CLASS_1_X_16 = 0x82BE
IMAGE_CLASS_4_X_8 = 0x82BF
IMAGE_CLASS_2_X_8 = 0x82C0
IMAGE_CLASS_1_X_8 = 0x82C1
IMAGE_CLASS_11_11_10 = 0x82C2
IMAGE_CLASS_10_10_10_2 = 0x82C3
VIEW_CLASS_128_BITS = 0x82C4
VIEW_CLASS_96_BITS = 0x82C5
VIEW_CLASS_64_BITS = 0x82C6
VIEW_CLASS_48_BITS = 0x82C7
VIEW_CLASS_32_BITS = 0x82C8
VIEW_CLASS_24_BITS = 0x82C9
VIEW_CLASS_16_BITS = 0x82CA
VIEW_CLASS_8_BITS = 0x82CB
VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC
VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD
VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE
VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF
VIEW_CLASS_RGTC1_RED = 0x82D0
VIEW_CLASS_RGTC2_RG = 0x82D1
VIEW_CLASS_BPTC_UNORM = 0x82D2
VIEW_CLASS_BPTC_FLOAT = 0x82D3
UNIFORM = 0x92E1
UNIFORM_BLOCK = 0x92E2
PROGRAM_INPUT = 0x92E3
PROGRAM_OUTPUT = 0x92E4
BUFFER_VARIABLE = 0x92E5
SHADER_STORAGE_BLOCK = 0x92E6
VERTEX_SUBROUTINE = 0x92E8
TESS_CONTROL_SUBROUTINE = 0x92E9
TESS_EVALUATION_SUBROUTINE = 0x92EA
GEOMETRY_SUBROUTINE = 0x92EB
FRAGMENT_SUBROUTINE = 0x92EC
COMPUTE_SUBROUTINE = 0x92ED
VERTEX_SUBROUTINE_UNIFORM = 0x92EE
TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF
TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0
GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1
FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2
COMPUTE_SUBROUTINE_UNIFORM = 0x92F3
TRANSFORM_FEEDBACK_VARYING = 0x92F4
ACTIVE_RESOURCES = 0x92F5
MAX_NAME_LENGTH = 0x92F6
MAX_NUM_ACTIVE_VARIABLES = 0x92F7
MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8
NAME_LENGTH = 0x92F9
TYPE = 0x92FA
ARRAY_SIZE = 0x92FB
OFFSET = 0x92FC
BLOCK_INDEX = 0x92FD
ARRAY_STRIDE = 0x92FE
MATRIX_STRIDE = 0x92FF
IS_ROW_MAJOR = 0x9300
ATOMIC_COUNTER_BUFFER_INDEX = 0x9301
BUFFER_BINDING = 0x9302
BUFFER_DATA_SIZE = 0x9303
NUM_ACTIVE_VARIABLES = 0x9304
ACTIVE_VARIABLES = 0x9305
REFERENCED_BY_VERTEX_SHADER = 0x9306
REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307
REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308
REFERENCED_BY_GEOMETRY_SHADER = 0x9309
REFERENCED_BY_FRAGMENT_SHADER = 0x930A
REFERENCED_BY_COMPUTE_SHADER = 0x930B
TOP_LEVEL_ARRAY_SIZE = 0x930C
TOP_LEVEL_ARRAY_STRIDE = 0x930D
LOCATION = 0x930E
LOCATION_INDEX = 0x930F
IS_PER_PATCH = 0x92E7
SHADER_STORAGE_BUFFER = 0x90D2
SHADER_STORAGE_BUFFER_BINDING = 0x90D3
SHADER_STORAGE_BUFFER_START = 0x90D4
SHADER_STORAGE_BUFFER_SIZE = 0x90D5
MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6
MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7
MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8
MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9
MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA
MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB
MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC
MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD
MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE
SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF
SHADER_STORAGE_BARRIER_BIT = 0x00002000
MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39
DEPTH_STENCIL_TEXTURE_MODE = 0x90EA
TEXTURE_BUFFER_OFFSET = 0x919D
TEXTURE_BUFFER_SIZE = 0x919E
TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F
TEXTURE_VIEW_MIN_LEVEL = 0x82DB
TEXTURE_VIEW_NUM_LEVELS = 0x82DC
TEXTURE_VIEW_MIN_LAYER = 0x82DD
TEXTURE_VIEW_NUM_LAYERS = 0x82DE
TEXTURE_IMMUTABLE_LEVELS = 0x82DF
VERTEX_ATTRIB_BINDING = 0x82D4
VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5
VERTEX_BINDING_DIVISOR = 0x82D6
VERTEX_BINDING_OFFSET = 0x82D7
VERTEX_BINDING_STRIDE = 0x82D8
MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9
MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA
VERTEX_BINDING_BUFFER = 0x8F4F
@accepts(t.enum, t.enum, t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def clear_buffer_data(target, internalformat, format, type, data):
    '''fill a buffer object's data store with a fixed value'''

@accepts(t.enum, t.enum, t.intptr, t.sizeiptr, t.enum, t.enum, t.void)
@returns(t.void)
@binds(dll)
def clear_buffer_sub_data(target, internalformat, offset, size, format, type, data):
    '''fill all or part of buffer object's data store with a fixed value'''

@accepts(t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def dispatch_compute(num_groups_x, num_groups_y, num_groups_z):
    '''launch one or more compute work groups'''

@accepts(t.intptr)
@returns(t.void)
@binds(dll)
def dispatch_compute_indirect(indirect):
    '''launch one or more compute work groups using parameters stored in a buffer'''

@accepts(t.uint, t.enum, t.int, t.int, t.int, t.int, t.uint, t.enum, t.int, t.int, t.int, t.int, t.sizei, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def copy_image_sub_data(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth):
    '''perform a raw data copy between two images'''

@accepts(t.enum, t.enum, t.int)
@returns(t.void)
@binds(dll)
def framebuffer_parameteri(target, pname, param):
    '''set a named parameter of a framebuffer object'''

@accepts(t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_framebuffer_parameteriv(target, pname, params):
    pass

@accepts(t.enum, t.enum, t.enum, t.sizei, POINTER(t.int64))
@returns(t.void)
@binds(dll)
def get_internalformati64v(target, internalformat, pname, bufSize, params):
    pass

@accepts(t.uint, t.int, t.int, t.int, t.int, t.sizei, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def invalidate_tex_sub_image(texture, level, xoffset, yoffset, zoffset, width, height, depth):
    '''invalidate a region of a texture image'''

@accepts(t.uint, t.int)
@returns(t.void)
@binds(dll)
def invalidate_tex_image(texture, level):
    '''invalidate the entirety a texture image'''

@accepts(t.uint, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def invalidate_buffer_sub_data(buffer, offset, length):
    '''invalidate a region of a buffer object's data store'''

@accepts(t.uint)
@returns(t.void)
@binds(dll)
def invalidate_buffer_data(buffer):
    '''invalidate the content of a buffer object's data store'''

@accepts(t.enum, t.sizei, POINTER(t.enum))
@returns(t.void)
@binds(dll)
def invalidate_framebuffer(target, numAttachments, attachments):
    '''invalidate the content of some or all of a framebuffer's attachments'''

@accepts(t.enum, t.sizei, POINTER(t.enum), t.int, t.int, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def invalidate_sub_framebuffer(target, numAttachments, attachments, x, y, width, height):
    '''invalidate the content of a region of some or all of a framebuffer's attachments'''

@accepts(t.enum, t.void, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def multi_draw_arrays_indirect(mode, indirect, drawcount, stride):
    '''render multiple sets of primitives from array data, taking parameters from memory'''

@accepts(t.enum, t.enum, t.void, t.sizei, t.sizei)
@returns(t.void)
@binds(dll)
def multi_draw_elements_indirect(mode, type, indirect, drawcount, stride):
    '''render indexed primitives from array data, taking parameters from memory'''

@accepts(t.uint, t.enum, t.enum, POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_program_interfaceiv(program, programInterface, pname, params):
    pass

@accepts(t.uint, t.enum, t.char_p)
@returns(t.uint)
@binds(dll)
def get_program_resource_index(program, programInterface, name):
    '''query the index of a named resource within a program'''

@accepts(t.uint, t.enum, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_program_resource_name(program, programInterface, index, bufSize, length, name):
    '''query the name of an indexed resource within a program'''

@accepts(t.uint, t.enum, t.uint, t.sizei, POINTER(t.enum), t.sizei, POINTER(t.sizei), POINTER(t.int))
@returns(t.void)
@binds(dll)
def get_program_resourceiv(program, programInterface, index, propCount, props, bufSize, length, params):
    pass

@accepts(t.uint, t.enum, t.char_p)
@returns(t.int)
@binds(dll)
def get_program_resource_location(program, programInterface, name):
    '''query the location of a named resource within a program'''

@accepts(t.uint, t.enum, t.char_p)
@returns(t.int)
@binds(dll)
def get_program_resource_location_index(program, programInterface, name):
    '''query the fragment color index of a named variable within a program'''

@accepts(t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def shader_storage_block_binding(program, storageBlockIndex, storageBlockBinding):
    '''change an active shader storage block binding'''

@accepts(t.enum, t.enum, t.uint, t.intptr, t.sizeiptr)
@returns(t.void)
@binds(dll)
def tex_buffer_range(target, internalformat, buffer, offset, size):
    '''attach a range of a buffer object's data store to a buffer texture object'''

@accepts(t.enum, t.sizei, t.enum, t.sizei, t.sizei, t.boolean)
@returns(t.void)
@binds(dll)
def tex_storage2_d_multisample(target, samples, internalformat, width, height, fixedsamplelocations):
    '''specify storage for a two-dimensional multisample texture'''

@accepts(t.enum, t.sizei, t.enum, t.sizei, t.sizei, t.sizei, t.boolean)
@returns(t.void)
@binds(dll)
def tex_storage3_d_multisample(target, samples, internalformat, width, height, depth, fixedsamplelocations):
    '''specify storage for a two-dimensional multisample array texture'''

@accepts(t.uint, t.enum, t.uint, t.enum, t.uint, t.uint, t.uint, t.uint)
@returns(t.void)
@binds(dll)
def texture_view(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers):
    '''initialize a texture as a data alias of another texture's data store'''

@accepts(t.uint, t.uint, t.intptr, t.sizei)
@returns(t.void)
@binds(dll)
def bind_vertex_buffer(bindingindex, buffer, offset, stride):
    '''bind a buffer to a vertex buffer bind point'''

@accepts(t.uint, t.int, t.enum, t.boolean, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_format(attribindex, size, type, normalized, relativeoffset):
    '''specify the organization of vertex arrays'''

@accepts(t.uint, t.int, t.enum, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_i_format(attribindex, size, type, relativeoffset):
    pass

@accepts(t.uint, t.int, t.enum, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_l_format(attribindex, size, type, relativeoffset):
    pass

@accepts(t.uint, t.uint)
@returns(t.void)
@binds(dll)
def vertex_attrib_binding(attribindex, bindingindex):
    '''associate a vertex attribute and a vertex buffer binding for a vertex array object'''

@accepts(t.uint, t.uint)
@returns(t.void)
@binds(dll)
def vertex_binding_divisor(bindingindex, divisor):
    '''modify the rate at which generic vertex attributes advance'''

@accepts(t.enum, t.enum, t.enum, t.sizei, POINTER(t.uint), t.boolean)
@returns(t.void)
@binds(dll)
def debug_message_control(source, type, severity, count, ids, enabled):
    '''control the reporting of debug messages in a debug context'''

@accepts(t.enum, t.enum, t.uint, t.enum, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def debug_message_insert(source, type, id, severity, length, buf):
    '''inject an application-supplied message into the debug message queue'''

@accepts(t.DEBUGPROC, t.void)
@returns(t.void)
@binds(dll)
def debug_message_callback(callback, userParam):
    '''specify a callback to receive debugging messages from the GL'''

@accepts(t.uint, t.sizei, POINTER(t.enum), POINTER(t.enum), POINTER(t.uint), POINTER(t.enum), POINTER(t.sizei), t.char_p)
@returns(t.uint)
@binds(dll)
def get_debug_message_log(count, bufSize, sources, types, ids, severities, lengths, messageLog):
    '''retrieve messages from the debug message log'''

@accepts(t.enum, t.uint, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def push_debug_group(source, id, length, message):
    '''push a named debug group into the command stream'''

@accepts()
@returns(t.void)
@binds(dll)
def pop_debug_group():
    '''pop the active debug group'''

@accepts(t.enum, t.uint, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def object_label(identifier, name, length, label):
    '''label a named object identified within a namespace'''

@accepts(t.enum, t.uint, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_object_label(identifier, name, bufSize, length, label):
    '''retrieve the label of a named object identified within a namespace'''

@accepts(t.void, t.sizei, t.char_p)
@returns(t.void)
@binds(dll)
def object_ptr_label(ptr, length, label):
    '''label a a sync object identified by a pointer'''

@accepts(t.void, t.sizei, POINTER(t.sizei), t.char_p)
@returns(t.void)
@binds(dll)
def get_object_ptr_label(ptr, bufSize, length, label):
    '''retrieve the label of a sync object identified by a pointer'''

@accepts(t.enum, t.void)
@returns(t.void)
@binds(dll)
def get_pointerv(pname, params):
    '''return the address of the specified pointer'''

DISPLAY_LIST = 0x82E7
@accepts(t.enum, t.void)
@returns(t.void)
@binds(dll)
def get_pointerv(pname, params):
    '''return the address of the specified pointer'''

STACK_UNDERFLOW = 0x0504
STACK_OVERFLOW = 0x0503