from schema import api, doc

MAN_PATH = 'OpenGL/registry/man/man{}/{}.xml'
XML_PATH = 'OpenGL/registry/api/gl.xml'
RAW_PATH = 'OpenGL/opengl/gl/raw/'

def main():
    document = api.Document(XML_PATH)
    write_init(document.registry)
    write_raw(document.registry)
    
def get_definitions(registry):
    command_values = {
        command.proto.name.text :
        (
            command.proto.ptype.type,
            ', '.join(param.name.text for param in command.params),
            ', '.join(param.ptype.type for param in command.params)
        )
        for command_group in registry.commands
        for command in command_group.values
    }
    
    enum_values = {
        enum.name : enum.value
        for enum_group in registry.enums
        for enum in enum_group.values
    }
    
    return command_values, enum_values
    
def write_init(registry):
    path = RAW_PATH + '__init__.py'
    lines = ['from opengl.gl.raw.{} import *'.format(feature.pep_name) for feature in registry.features]
    write_file(lines, path)
    
def write_raw(registry):
    definitions = get_definitions(registry)
    for feature in registry.features:
        write_feature(feature, *definitions)
        
def write_feature(feature, command_values, enum_values):
    path = RAW_PATH + feature.pep_name + '.py'
    lines = []
    add_headers(lines)
    for require in feature.requires:
        add_commands(lines, require.commands, command_values)
        add_enums(lines, require.enums, enum_values)
    write_file(lines, path)
    
def add_headers(lines):
    lines.append('#BEWARE: automatically generated code')
    lines.append('#This code was generated by opengl/gl/generate/__main__.py')
    lines.append('')
    lines.append('from opengl.gl.raw.bindings import *')
    lines.append('')
    
def add_commands(lines, commands, command_values):
    for command in commands:
        ret, params, types = command_values[command.name]
        lines.append('@accepts({})'.format(types))
        lines.append('@returns({})'.format(ret))
        lines.append('@binds(dll)')
        lines.append('def {}({}): '.format(command.pep_name, params))
        for i in [4, 3, 2]:
            if add_documentation(lines, MAN_PATH.format(i, command.name)): break
            if i == 2: lines.append('    pass')
        lines.append('')
        
def add_documentation(lines, path):
    try:
        document = doc.Document(path)
        text = document.refentry.refnamediv.refpurpose.text
        doc_string_format = '    \'\'\'{}\'\'\''
        doc_string = doc_string_format.format(text)
        lines.append(doc_string)
        return True
    except:
        return False
        
def add_enums(lines, enums, enum_values):
    for enum in enums:
        name = enum.pep_name
        value = enum_values[enum.name]
        line = '{} = {}'.format(name, value)
        lines.append(line)
            
def write_file(lines, path):
    with open(path, 'w') as file:
        file.writelines('\n'.join(lines))

if __name__ == '__main__': main()